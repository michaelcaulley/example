// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Todo) Owner(ctx context.Context) (*User, error) {
	result, err := _m.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryOwner().Only(ctx)
	}
	return result, err
}

func (_m *User) Todos(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *TodoWhereInput,
) (*TodoConnection, error) {
	opts := []TodoPaginateOption{
		WithTodoFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := _m.Edges.totalCount[0][alias]
	if nodes, err := _m.NamedTodos(alias); err == nil || hasTotalCount {
		pager, err := newTodoPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TodoConnection{Edges: []*TodoEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return _m.QueryTodos().Paginate(ctx, after, first, before, last, opts...)
}
