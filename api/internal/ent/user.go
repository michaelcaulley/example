// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Todos holds the value of the todos edge.
	Todos []*Todo `json:"todos,omitempty"`
	// ModeratorUsers holds the value of the moderator_users edge.
	ModeratorUsers []*User `json:"moderator_users,omitempty"`
	// Moderators holds the value of the moderators edge.
	Moderators []*User `json:"moderators,omitempty"`
	// Moderator holds the value of the moderator edge.
	Moderator []*Moderator `json:"moderator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTodos          map[string][]*Todo
	namedModeratorUsers map[string][]*User
	namedModerators     map[string][]*User
	namedModerator      map[string][]*Moderator
}

// TodosOrErr returns the Todos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TodosOrErr() ([]*Todo, error) {
	if e.loadedTypes[0] {
		return e.Todos, nil
	}
	return nil, &NotLoadedError{edge: "todos"}
}

// ModeratorUsersOrErr returns the ModeratorUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModeratorUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.ModeratorUsers, nil
	}
	return nil, &NotLoadedError{edge: "moderator_users"}
}

// ModeratorsOrErr returns the Moderators value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModeratorsOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Moderators, nil
	}
	return nil, &NotLoadedError{edge: "moderators"}
}

// ModeratorOrErr returns the Moderator value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModeratorOrErr() ([]*Moderator, error) {
	if e.loadedTypes[3] {
		return e.Moderator, nil
	}
	return nil, &NotLoadedError{edge: "moderator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTodos queries the "todos" edge of the User entity.
func (_m *User) QueryTodos() *TodoQuery {
	return NewUserClient(_m.config).QueryTodos(_m)
}

// QueryModeratorUsers queries the "moderator_users" edge of the User entity.
func (_m *User) QueryModeratorUsers() *UserQuery {
	return NewUserClient(_m.config).QueryModeratorUsers(_m)
}

// QueryModerators queries the "moderators" edge of the User entity.
func (_m *User) QueryModerators() *UserQuery {
	return NewUserClient(_m.config).QueryModerators(_m)
}

// QueryModerator queries the "moderator" edge of the User entity.
func (_m *User) QueryModerator() *ModeratorQuery {
	return NewUserClient(_m.config).QueryModerator(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTodos returns the Todos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedTodos(name string) ([]*Todo, error) {
	if _m.Edges.namedTodos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTodos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedTodos(name string, edges ...*Todo) {
	if _m.Edges.namedTodos == nil {
		_m.Edges.namedTodos = make(map[string][]*Todo)
	}
	if len(edges) == 0 {
		_m.Edges.namedTodos[name] = []*Todo{}
	} else {
		_m.Edges.namedTodos[name] = append(_m.Edges.namedTodos[name], edges...)
	}
}

// NamedModeratorUsers returns the ModeratorUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedModeratorUsers(name string) ([]*User, error) {
	if _m.Edges.namedModeratorUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedModeratorUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedModeratorUsers(name string, edges ...*User) {
	if _m.Edges.namedModeratorUsers == nil {
		_m.Edges.namedModeratorUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		_m.Edges.namedModeratorUsers[name] = []*User{}
	} else {
		_m.Edges.namedModeratorUsers[name] = append(_m.Edges.namedModeratorUsers[name], edges...)
	}
}

// NamedModerators returns the Moderators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedModerators(name string) ([]*User, error) {
	if _m.Edges.namedModerators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedModerators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedModerators(name string, edges ...*User) {
	if _m.Edges.namedModerators == nil {
		_m.Edges.namedModerators = make(map[string][]*User)
	}
	if len(edges) == 0 {
		_m.Edges.namedModerators[name] = []*User{}
	} else {
		_m.Edges.namedModerators[name] = append(_m.Edges.namedModerators[name], edges...)
	}
}

// NamedModerator returns the Moderator named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *User) NamedModerator(name string) ([]*Moderator, error) {
	if _m.Edges.namedModerator == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedModerator[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *User) appendNamedModerator(name string, edges ...*Moderator) {
	if _m.Edges.namedModerator == nil {
		_m.Edges.namedModerator = make(map[string][]*Moderator)
	}
	if len(edges) == 0 {
		_m.Edges.namedModerator[name] = []*Moderator{}
	} else {
		_m.Edges.namedModerator[name] = append(_m.Edges.namedModerator[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
