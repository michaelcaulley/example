// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/todo"
	"example/internal/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Todo is the model entity for the Todo schema.
type Todo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// DoneAt holds the value of the "done_at" field.
	DoneAt *time.Time `json:"done_at,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID int `json:"owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoQuery when eager-loading is set.
	Edges        TodoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TodoEdges holds the relations/edges for other nodes in the graph.
type TodoEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Reminders holds the value of the reminders edge.
	Reminders []*Reminder `json:"reminders,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*TodoGroup `json:"groups,omitempty"`
	// TodoReminders holds the value of the todo_reminders edge.
	TodoReminders []*TodoReminder `json:"todo_reminders,omitempty"`
	// GroupedTodos holds the value of the grouped_todos edge.
	GroupedTodos []*TodoToTodoGroupAssociation `json:"grouped_todos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedReminders     map[string][]*Reminder
	namedGroups        map[string][]*TodoGroup
	namedTodoReminders map[string][]*TodoReminder
	namedGroupedTodos  map[string][]*TodoToTodoGroupAssociation
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// RemindersOrErr returns the Reminders value or an error if the edge
// was not loaded in eager-loading.
func (e TodoEdges) RemindersOrErr() ([]*Reminder, error) {
	if e.loadedTypes[1] {
		return e.Reminders, nil
	}
	return nil, &NotLoadedError{edge: "reminders"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e TodoEdges) GroupsOrErr() ([]*TodoGroup, error) {
	if e.loadedTypes[2] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// TodoRemindersOrErr returns the TodoReminders value or an error if the edge
// was not loaded in eager-loading.
func (e TodoEdges) TodoRemindersOrErr() ([]*TodoReminder, error) {
	if e.loadedTypes[3] {
		return e.TodoReminders, nil
	}
	return nil, &NotLoadedError{edge: "todo_reminders"}
}

// GroupedTodosOrErr returns the GroupedTodos value or an error if the edge
// was not loaded in eager-loading.
func (e TodoEdges) GroupedTodosOrErr() ([]*TodoToTodoGroupAssociation, error) {
	if e.loadedTypes[4] {
		return e.GroupedTodos, nil
	}
	return nil, &NotLoadedError{edge: "grouped_todos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Todo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todo.FieldID, todo.FieldOwnerID:
			values[i] = new(sql.NullInt64)
		case todo.FieldText:
			values[i] = new(sql.NullString)
		case todo.FieldDoneAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Todo fields.
func (_m *Todo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case todo.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				_m.Text = value.String
			}
		case todo.FieldDoneAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field done_at", values[i])
			} else if value.Valid {
				_m.DoneAt = new(time.Time)
				*_m.DoneAt = value.Time
			}
		case todo.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Todo.
// This includes values selected through modifiers, order, etc.
func (_m *Todo) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Todo entity.
func (_m *Todo) QueryOwner() *UserQuery {
	return NewTodoClient(_m.config).QueryOwner(_m)
}

// QueryReminders queries the "reminders" edge of the Todo entity.
func (_m *Todo) QueryReminders() *ReminderQuery {
	return NewTodoClient(_m.config).QueryReminders(_m)
}

// QueryGroups queries the "groups" edge of the Todo entity.
func (_m *Todo) QueryGroups() *TodoGroupQuery {
	return NewTodoClient(_m.config).QueryGroups(_m)
}

// QueryTodoReminders queries the "todo_reminders" edge of the Todo entity.
func (_m *Todo) QueryTodoReminders() *TodoReminderQuery {
	return NewTodoClient(_m.config).QueryTodoReminders(_m)
}

// QueryGroupedTodos queries the "grouped_todos" edge of the Todo entity.
func (_m *Todo) QueryGroupedTodos() *TodoToTodoGroupAssociationQuery {
	return NewTodoClient(_m.config).QueryGroupedTodos(_m)
}

// Update returns a builder for updating this Todo.
// Note that you need to call Todo.Unwrap() before calling this method if this Todo
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Todo) Update() *TodoUpdateOne {
	return NewTodoClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Todo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Todo) Unwrap() *Todo {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Todo is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Todo) String() string {
	var builder strings.Builder
	builder.WriteString("Todo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("text=")
	builder.WriteString(_m.Text)
	builder.WriteString(", ")
	if v := _m.DoneAt; v != nil {
		builder.WriteString("done_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.OwnerID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedReminders returns the Reminders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Todo) NamedReminders(name string) ([]*Reminder, error) {
	if _m.Edges.namedReminders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedReminders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Todo) appendNamedReminders(name string, edges ...*Reminder) {
	if _m.Edges.namedReminders == nil {
		_m.Edges.namedReminders = make(map[string][]*Reminder)
	}
	if len(edges) == 0 {
		_m.Edges.namedReminders[name] = []*Reminder{}
	} else {
		_m.Edges.namedReminders[name] = append(_m.Edges.namedReminders[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Todo) NamedGroups(name string) ([]*TodoGroup, error) {
	if _m.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Todo) appendNamedGroups(name string, edges ...*TodoGroup) {
	if _m.Edges.namedGroups == nil {
		_m.Edges.namedGroups = make(map[string][]*TodoGroup)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroups[name] = []*TodoGroup{}
	} else {
		_m.Edges.namedGroups[name] = append(_m.Edges.namedGroups[name], edges...)
	}
}

// NamedTodoReminders returns the TodoReminders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Todo) NamedTodoReminders(name string) ([]*TodoReminder, error) {
	if _m.Edges.namedTodoReminders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTodoReminders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Todo) appendNamedTodoReminders(name string, edges ...*TodoReminder) {
	if _m.Edges.namedTodoReminders == nil {
		_m.Edges.namedTodoReminders = make(map[string][]*TodoReminder)
	}
	if len(edges) == 0 {
		_m.Edges.namedTodoReminders[name] = []*TodoReminder{}
	} else {
		_m.Edges.namedTodoReminders[name] = append(_m.Edges.namedTodoReminders[name], edges...)
	}
}

// NamedGroupedTodos returns the GroupedTodos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Todo) NamedGroupedTodos(name string) ([]*TodoToTodoGroupAssociation, error) {
	if _m.Edges.namedGroupedTodos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroupedTodos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Todo) appendNamedGroupedTodos(name string, edges ...*TodoToTodoGroupAssociation) {
	if _m.Edges.namedGroupedTodos == nil {
		_m.Edges.namedGroupedTodos = make(map[string][]*TodoToTodoGroupAssociation)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroupedTodos[name] = []*TodoToTodoGroupAssociation{}
	} else {
		_m.Edges.namedGroupedTodos[name] = append(_m.Edges.namedGroupedTodos[name], edges...)
	}
}

// Todos is a parsable slice of Todo.
type Todos []*Todo
