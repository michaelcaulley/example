// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/moderator"
	"example/internal/ent/predicate"
	"example/internal/ent/user"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModeratorUpdate is the builder for updating Moderator entities.
type ModeratorUpdate struct {
	config
	hooks     []Hook
	mutation  *ModeratorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModeratorUpdate builder.
func (_u *ModeratorUpdate) Where(ps ...predicate.Moderator) *ModeratorUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *ModeratorUpdate) SetUserID(v int) *ModeratorUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ModeratorUpdate) SetNillableUserID(v *int) *ModeratorUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetModeratorUserID sets the "moderator_user_id" field.
func (_u *ModeratorUpdate) SetModeratorUserID(v int) *ModeratorUpdate {
	_u.mutation.SetModeratorUserID(v)
	return _u
}

// SetNillableModeratorUserID sets the "moderator_user_id" field if the given value is not nil.
func (_u *ModeratorUpdate) SetNillableModeratorUserID(v *int) *ModeratorUpdate {
	if v != nil {
		_u.SetModeratorUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ModeratorUpdate) SetUser(v *User) *ModeratorUpdate {
	return _u.SetUserID(v.ID)
}

// SetModeratorID sets the "moderator" edge to the User entity by ID.
func (_u *ModeratorUpdate) SetModeratorID(id int) *ModeratorUpdate {
	_u.mutation.SetModeratorID(id)
	return _u
}

// SetModerator sets the "moderator" edge to the User entity.
func (_u *ModeratorUpdate) SetModerator(v *User) *ModeratorUpdate {
	return _u.SetModeratorID(v.ID)
}

// Mutation returns the ModeratorMutation object of the builder.
func (_u *ModeratorUpdate) Mutation() *ModeratorMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ModeratorUpdate) ClearUser() *ModeratorUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearModerator clears the "moderator" edge to the User entity.
func (_u *ModeratorUpdate) ClearModerator() *ModeratorUpdate {
	_u.mutation.ClearModerator()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ModeratorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ModeratorUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ModeratorUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ModeratorUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ModeratorUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Moderator.user"`)
	}
	if _u.mutation.ModeratorCleared() && len(_u.mutation.ModeratorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Moderator.moderator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ModeratorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModeratorUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ModeratorUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(moderator.Table, moderator.Columns, sqlgraph.NewFieldSpec(moderator.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(moderator.FieldModeratorUserID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.UserTable,
			Columns: []string{moderator.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.UserTable,
			Columns: []string{moderator.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModeratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.ModeratorTable,
			Columns: []string{moderator.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModeratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.ModeratorTable,
			Columns: []string{moderator.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moderator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ModeratorUpdateOne is the builder for updating a single Moderator entity.
type ModeratorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModeratorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (_u *ModeratorUpdateOne) SetUserID(v int) *ModeratorUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *ModeratorUpdateOne) SetNillableUserID(v *int) *ModeratorUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetModeratorUserID sets the "moderator_user_id" field.
func (_u *ModeratorUpdateOne) SetModeratorUserID(v int) *ModeratorUpdateOne {
	_u.mutation.SetModeratorUserID(v)
	return _u
}

// SetNillableModeratorUserID sets the "moderator_user_id" field if the given value is not nil.
func (_u *ModeratorUpdateOne) SetNillableModeratorUserID(v *int) *ModeratorUpdateOne {
	if v != nil {
		_u.SetModeratorUserID(*v)
	}
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ModeratorUpdateOne) SetUser(v *User) *ModeratorUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetModeratorID sets the "moderator" edge to the User entity by ID.
func (_u *ModeratorUpdateOne) SetModeratorID(id int) *ModeratorUpdateOne {
	_u.mutation.SetModeratorID(id)
	return _u
}

// SetModerator sets the "moderator" edge to the User entity.
func (_u *ModeratorUpdateOne) SetModerator(v *User) *ModeratorUpdateOne {
	return _u.SetModeratorID(v.ID)
}

// Mutation returns the ModeratorMutation object of the builder.
func (_u *ModeratorUpdateOne) Mutation() *ModeratorMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ModeratorUpdateOne) ClearUser() *ModeratorUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearModerator clears the "moderator" edge to the User entity.
func (_u *ModeratorUpdateOne) ClearModerator() *ModeratorUpdateOne {
	_u.mutation.ClearModerator()
	return _u
}

// Where appends a list predicates to the ModeratorUpdate builder.
func (_u *ModeratorUpdateOne) Where(ps ...predicate.Moderator) *ModeratorUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ModeratorUpdateOne) Select(field string, fields ...string) *ModeratorUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Moderator entity.
func (_u *ModeratorUpdateOne) Save(ctx context.Context) (*Moderator, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ModeratorUpdateOne) SaveX(ctx context.Context) *Moderator {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ModeratorUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ModeratorUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ModeratorUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Moderator.user"`)
	}
	if _u.mutation.ModeratorCleared() && len(_u.mutation.ModeratorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Moderator.moderator"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ModeratorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModeratorUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ModeratorUpdateOne) sqlSave(ctx context.Context) (_node *Moderator, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(moderator.Table, moderator.Columns, sqlgraph.NewFieldSpec(moderator.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(moderator.FieldModeratorUserID, field.TypeInt))
	if id, ok := _u.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Moderator.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := _u.mutation.ModeratorUserID(); !ok {
		return nil, &ValidationError{Name: "moderator_user_id", err: errors.New(`ent: missing "Moderator.moderator_user_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !moderator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.UserTable,
			Columns: []string{moderator.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.UserTable,
			Columns: []string{moderator.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModeratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.ModeratorTable,
			Columns: []string{moderator.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModeratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.ModeratorTable,
			Columns: []string{moderator.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Moderator{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moderator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
