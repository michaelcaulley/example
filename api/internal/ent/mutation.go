// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/moderator"
	"example/internal/ent/peoplepartner"
	"example/internal/ent/predicate"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todoreminder"
	"example/internal/ent/user"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeModerator     = "Moderator"
	TypePeoplePartner = "PeoplePartner"
	TypeReminder      = "Reminder"
	TypeTodo          = "Todo"
	TypeTodoReminder  = "TodoReminder"
	TypeUser          = "User"
)

// ModeratorMutation represents an operation that mutates the Moderator nodes in the graph.
type ModeratorMutation struct {
	config
	op               Op
	typ              string
	clearedFields    map[string]struct{}
	user             *int
	cleareduser      bool
	moderator        *int
	clearedmoderator bool
	done             bool
	oldValue         func(context.Context) (*Moderator, error)
	predicates       []predicate.Moderator
}

var _ ent.Mutation = (*ModeratorMutation)(nil)

// moderatorOption allows management of the mutation configuration using functional options.
type moderatorOption func(*ModeratorMutation)

// newModeratorMutation creates new mutation for the Moderator entity.
func newModeratorMutation(c config, op Op, opts ...moderatorOption) *ModeratorMutation {
	m := &ModeratorMutation{
		config:        c,
		op:            op,
		typ:           TypeModerator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ModeratorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ModeratorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *ModeratorMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ModeratorMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ModeratorMutation) ResetUserID() {
	m.user = nil
}

// SetModeratorUserID sets the "moderator_user_id" field.
func (m *ModeratorMutation) SetModeratorUserID(i int) {
	m.moderator = &i
}

// ModeratorUserID returns the value of the "moderator_user_id" field in the mutation.
func (m *ModeratorMutation) ModeratorUserID() (r int, exists bool) {
	v := m.moderator
	if v == nil {
		return
	}
	return *v, true
}

// ResetModeratorUserID resets all changes to the "moderator_user_id" field.
func (m *ModeratorMutation) ResetModeratorUserID() {
	m.moderator = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *ModeratorMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[moderator.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ModeratorMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ModeratorMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ModeratorMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetModeratorID sets the "moderator" edge to the User entity by id.
func (m *ModeratorMutation) SetModeratorID(id int) {
	m.moderator = &id
}

// ClearModerator clears the "moderator" edge to the User entity.
func (m *ModeratorMutation) ClearModerator() {
	m.clearedmoderator = true
	m.clearedFields[moderator.FieldModeratorUserID] = struct{}{}
}

// ModeratorCleared reports if the "moderator" edge to the User entity was cleared.
func (m *ModeratorMutation) ModeratorCleared() bool {
	return m.clearedmoderator
}

// ModeratorID returns the "moderator" edge ID in the mutation.
func (m *ModeratorMutation) ModeratorID() (id int, exists bool) {
	if m.moderator != nil {
		return *m.moderator, true
	}
	return
}

// ModeratorIDs returns the "moderator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ModeratorID instead. It exists only for internal usage by the builders.
func (m *ModeratorMutation) ModeratorIDs() (ids []int) {
	if id := m.moderator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetModerator resets all changes to the "moderator" edge.
func (m *ModeratorMutation) ResetModerator() {
	m.moderator = nil
	m.clearedmoderator = false
}

// Where appends a list predicates to the ModeratorMutation builder.
func (m *ModeratorMutation) Where(ps ...predicate.Moderator) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ModeratorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ModeratorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Moderator, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ModeratorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ModeratorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Moderator).
func (m *ModeratorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ModeratorMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user != nil {
		fields = append(fields, moderator.FieldUserID)
	}
	if m.moderator != nil {
		fields = append(fields, moderator.FieldModeratorUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ModeratorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case moderator.FieldUserID:
		return m.UserID()
	case moderator.FieldModeratorUserID:
		return m.ModeratorUserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ModeratorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Moderator does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModeratorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case moderator.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case moderator.FieldModeratorUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModeratorUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Moderator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ModeratorMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ModeratorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ModeratorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Moderator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ModeratorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ModeratorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ModeratorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Moderator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ModeratorMutation) ResetField(name string) error {
	switch name {
	case moderator.FieldUserID:
		m.ResetUserID()
		return nil
	case moderator.FieldModeratorUserID:
		m.ResetModeratorUserID()
		return nil
	}
	return fmt.Errorf("unknown Moderator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ModeratorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, moderator.EdgeUser)
	}
	if m.moderator != nil {
		edges = append(edges, moderator.EdgeModerator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ModeratorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case moderator.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case moderator.EdgeModerator:
		if id := m.moderator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ModeratorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ModeratorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ModeratorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, moderator.EdgeUser)
	}
	if m.clearedmoderator {
		edges = append(edges, moderator.EdgeModerator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ModeratorMutation) EdgeCleared(name string) bool {
	switch name {
	case moderator.EdgeUser:
		return m.cleareduser
	case moderator.EdgeModerator:
		return m.clearedmoderator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ModeratorMutation) ClearEdge(name string) error {
	switch name {
	case moderator.EdgeUser:
		m.ClearUser()
		return nil
	case moderator.EdgeModerator:
		m.ClearModerator()
		return nil
	}
	return fmt.Errorf("unknown Moderator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ModeratorMutation) ResetEdge(name string) error {
	switch name {
	case moderator.EdgeUser:
		m.ResetUser()
		return nil
	case moderator.EdgeModerator:
		m.ResetModerator()
		return nil
	}
	return fmt.Errorf("unknown Moderator edge %s", name)
}

// PeoplePartnerMutation represents an operation that mutates the PeoplePartner nodes in the graph.
type PeoplePartnerMutation struct {
	config
	op                    Op
	typ                   string
	clearedFields         map[string]struct{}
	user                  *int
	cleareduser           bool
	people_partner        *int
	clearedpeople_partner bool
	done                  bool
	oldValue              func(context.Context) (*PeoplePartner, error)
	predicates            []predicate.PeoplePartner
}

var _ ent.Mutation = (*PeoplePartnerMutation)(nil)

// peoplepartnerOption allows management of the mutation configuration using functional options.
type peoplepartnerOption func(*PeoplePartnerMutation)

// newPeoplePartnerMutation creates new mutation for the PeoplePartner entity.
func newPeoplePartnerMutation(c config, op Op, opts ...peoplepartnerOption) *PeoplePartnerMutation {
	m := &PeoplePartnerMutation{
		config:        c,
		op:            op,
		typ:           TypePeoplePartner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PeoplePartnerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PeoplePartnerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *PeoplePartnerMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PeoplePartnerMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PeoplePartnerMutation) ResetUserID() {
	m.user = nil
}

// SetPeoplePartnerUserID sets the "people_partner_user_id" field.
func (m *PeoplePartnerMutation) SetPeoplePartnerUserID(i int) {
	m.people_partner = &i
}

// PeoplePartnerUserID returns the value of the "people_partner_user_id" field in the mutation.
func (m *PeoplePartnerMutation) PeoplePartnerUserID() (r int, exists bool) {
	v := m.people_partner
	if v == nil {
		return
	}
	return *v, true
}

// ResetPeoplePartnerUserID resets all changes to the "people_partner_user_id" field.
func (m *PeoplePartnerMutation) ResetPeoplePartnerUserID() {
	m.people_partner = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *PeoplePartnerMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[peoplepartner.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PeoplePartnerMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PeoplePartnerMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PeoplePartnerMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetPeoplePartnerID sets the "people_partner" edge to the User entity by id.
func (m *PeoplePartnerMutation) SetPeoplePartnerID(id int) {
	m.people_partner = &id
}

// ClearPeoplePartner clears the "people_partner" edge to the User entity.
func (m *PeoplePartnerMutation) ClearPeoplePartner() {
	m.clearedpeople_partner = true
	m.clearedFields[peoplepartner.FieldPeoplePartnerUserID] = struct{}{}
}

// PeoplePartnerCleared reports if the "people_partner" edge to the User entity was cleared.
func (m *PeoplePartnerMutation) PeoplePartnerCleared() bool {
	return m.clearedpeople_partner
}

// PeoplePartnerID returns the "people_partner" edge ID in the mutation.
func (m *PeoplePartnerMutation) PeoplePartnerID() (id int, exists bool) {
	if m.people_partner != nil {
		return *m.people_partner, true
	}
	return
}

// PeoplePartnerIDs returns the "people_partner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PeoplePartnerID instead. It exists only for internal usage by the builders.
func (m *PeoplePartnerMutation) PeoplePartnerIDs() (ids []int) {
	if id := m.people_partner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPeoplePartner resets all changes to the "people_partner" edge.
func (m *PeoplePartnerMutation) ResetPeoplePartner() {
	m.people_partner = nil
	m.clearedpeople_partner = false
}

// Where appends a list predicates to the PeoplePartnerMutation builder.
func (m *PeoplePartnerMutation) Where(ps ...predicate.PeoplePartner) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PeoplePartnerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PeoplePartnerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PeoplePartner, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PeoplePartnerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PeoplePartnerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PeoplePartner).
func (m *PeoplePartnerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PeoplePartnerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user != nil {
		fields = append(fields, peoplepartner.FieldUserID)
	}
	if m.people_partner != nil {
		fields = append(fields, peoplepartner.FieldPeoplePartnerUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PeoplePartnerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case peoplepartner.FieldUserID:
		return m.UserID()
	case peoplepartner.FieldPeoplePartnerUserID:
		return m.PeoplePartnerUserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PeoplePartnerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema PeoplePartner does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PeoplePartnerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case peoplepartner.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case peoplepartner.FieldPeoplePartnerUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeoplePartnerUserID(v)
		return nil
	}
	return fmt.Errorf("unknown PeoplePartner field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PeoplePartnerMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PeoplePartnerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PeoplePartnerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PeoplePartner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PeoplePartnerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PeoplePartnerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PeoplePartnerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PeoplePartner nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PeoplePartnerMutation) ResetField(name string) error {
	switch name {
	case peoplepartner.FieldUserID:
		m.ResetUserID()
		return nil
	case peoplepartner.FieldPeoplePartnerUserID:
		m.ResetPeoplePartnerUserID()
		return nil
	}
	return fmt.Errorf("unknown PeoplePartner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PeoplePartnerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, peoplepartner.EdgeUser)
	}
	if m.people_partner != nil {
		edges = append(edges, peoplepartner.EdgePeoplePartner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PeoplePartnerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case peoplepartner.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case peoplepartner.EdgePeoplePartner:
		if id := m.people_partner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PeoplePartnerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PeoplePartnerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PeoplePartnerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, peoplepartner.EdgeUser)
	}
	if m.clearedpeople_partner {
		edges = append(edges, peoplepartner.EdgePeoplePartner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PeoplePartnerMutation) EdgeCleared(name string) bool {
	switch name {
	case peoplepartner.EdgeUser:
		return m.cleareduser
	case peoplepartner.EdgePeoplePartner:
		return m.clearedpeople_partner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PeoplePartnerMutation) ClearEdge(name string) error {
	switch name {
	case peoplepartner.EdgeUser:
		m.ClearUser()
		return nil
	case peoplepartner.EdgePeoplePartner:
		m.ClearPeoplePartner()
		return nil
	}
	return fmt.Errorf("unknown PeoplePartner unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PeoplePartnerMutation) ResetEdge(name string) error {
	switch name {
	case peoplepartner.EdgeUser:
		m.ResetUser()
		return nil
	case peoplepartner.EdgePeoplePartner:
		m.ResetPeoplePartner()
		return nil
	}
	return fmt.Errorf("unknown PeoplePartner edge %s", name)
}

// ReminderMutation represents an operation that mutates the Reminder nodes in the graph.
type ReminderMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	todo          map[int]struct{}
	removedtodo   map[int]struct{}
	clearedtodo   bool
	done          bool
	oldValue      func(context.Context) (*Reminder, error)
	predicates    []predicate.Reminder
}

var _ ent.Mutation = (*ReminderMutation)(nil)

// reminderOption allows management of the mutation configuration using functional options.
type reminderOption func(*ReminderMutation)

// newReminderMutation creates new mutation for the Reminder entity.
func newReminderMutation(c config, op Op, opts ...reminderOption) *ReminderMutation {
	m := &ReminderMutation{
		config:        c,
		op:            op,
		typ:           TypeReminder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReminderID sets the ID field of the mutation.
func withReminderID(id int) reminderOption {
	return func(m *ReminderMutation) {
		var (
			err   error
			once  sync.Once
			value *Reminder
		)
		m.oldValue = func(ctx context.Context) (*Reminder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reminder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReminder sets the old Reminder of the mutation.
func withReminder(node *Reminder) reminderOption {
	return func(m *ReminderMutation) {
		m.oldValue = func(context.Context) (*Reminder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReminderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReminderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReminderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReminderMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reminder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReminderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReminderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Reminder entity.
// If the Reminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReminderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReminderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReminderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReminderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Reminder entity.
// If the Reminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReminderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReminderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTodoIDs adds the "todo" edge to the Todo entity by ids.
func (m *ReminderMutation) AddTodoIDs(ids ...int) {
	if m.todo == nil {
		m.todo = make(map[int]struct{})
	}
	for i := range ids {
		m.todo[ids[i]] = struct{}{}
	}
}

// ClearTodo clears the "todo" edge to the Todo entity.
func (m *ReminderMutation) ClearTodo() {
	m.clearedtodo = true
}

// TodoCleared reports if the "todo" edge to the Todo entity was cleared.
func (m *ReminderMutation) TodoCleared() bool {
	return m.clearedtodo
}

// RemoveTodoIDs removes the "todo" edge to the Todo entity by IDs.
func (m *ReminderMutation) RemoveTodoIDs(ids ...int) {
	if m.removedtodo == nil {
		m.removedtodo = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.todo, ids[i])
		m.removedtodo[ids[i]] = struct{}{}
	}
}

// RemovedTodo returns the removed IDs of the "todo" edge to the Todo entity.
func (m *ReminderMutation) RemovedTodoIDs() (ids []int) {
	for id := range m.removedtodo {
		ids = append(ids, id)
	}
	return
}

// TodoIDs returns the "todo" edge IDs in the mutation.
func (m *ReminderMutation) TodoIDs() (ids []int) {
	for id := range m.todo {
		ids = append(ids, id)
	}
	return
}

// ResetTodo resets all changes to the "todo" edge.
func (m *ReminderMutation) ResetTodo() {
	m.todo = nil
	m.clearedtodo = false
	m.removedtodo = nil
}

// Where appends a list predicates to the ReminderMutation builder.
func (m *ReminderMutation) Where(ps ...predicate.Reminder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReminderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReminderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reminder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReminderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReminderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reminder).
func (m *ReminderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReminderMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, reminder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, reminder.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReminderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reminder.FieldCreatedAt:
		return m.CreatedAt()
	case reminder.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReminderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reminder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reminder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Reminder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReminderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reminder.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reminder.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Reminder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReminderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReminderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReminderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Reminder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReminderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReminderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReminderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reminder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReminderMutation) ResetField(name string) error {
	switch name {
	case reminder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reminder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Reminder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReminderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.todo != nil {
		edges = append(edges, reminder.EdgeTodo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReminderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reminder.EdgeTodo:
		ids := make([]ent.Value, 0, len(m.todo))
		for id := range m.todo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReminderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtodo != nil {
		edges = append(edges, reminder.EdgeTodo)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReminderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case reminder.EdgeTodo:
		ids := make([]ent.Value, 0, len(m.removedtodo))
		for id := range m.removedtodo {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReminderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtodo {
		edges = append(edges, reminder.EdgeTodo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReminderMutation) EdgeCleared(name string) bool {
	switch name {
	case reminder.EdgeTodo:
		return m.clearedtodo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReminderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Reminder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReminderMutation) ResetEdge(name string) error {
	switch name {
	case reminder.EdgeTodo:
		m.ResetTodo()
		return nil
	}
	return fmt.Errorf("unknown Reminder edge %s", name)
}

// TodoMutation represents an operation that mutates the Todo nodes in the graph.
type TodoMutation struct {
	config
	op               Op
	typ              string
	id               *int
	text             *string
	done_at          *time.Time
	clearedFields    map[string]struct{}
	owner            *int
	clearedowner     bool
	reminders        map[int]struct{}
	removedreminders map[int]struct{}
	clearedreminders bool
	done             bool
	oldValue         func(context.Context) (*Todo, error)
	predicates       []predicate.Todo
}

var _ ent.Mutation = (*TodoMutation)(nil)

// todoOption allows management of the mutation configuration using functional options.
type todoOption func(*TodoMutation)

// newTodoMutation creates new mutation for the Todo entity.
func newTodoMutation(c config, op Op, opts ...todoOption) *TodoMutation {
	m := &TodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoID sets the ID field of the mutation.
func withTodoID(id int) todoOption {
	return func(m *TodoMutation) {
		var (
			err   error
			once  sync.Once
			value *Todo
		)
		m.oldValue = func(ctx context.Context) (*Todo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodo sets the old Todo of the mutation.
func withTodo(node *Todo) todoOption {
	return func(m *TodoMutation) {
		m.oldValue = func(context.Context) (*Todo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Todo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *TodoMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *TodoMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *TodoMutation) ResetText() {
	m.text = nil
}

// SetDoneAt sets the "done_at" field.
func (m *TodoMutation) SetDoneAt(t time.Time) {
	m.done_at = &t
}

// DoneAt returns the value of the "done_at" field in the mutation.
func (m *TodoMutation) DoneAt() (r time.Time, exists bool) {
	v := m.done_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDoneAt returns the old "done_at" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldDoneAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDoneAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDoneAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoneAt: %w", err)
	}
	return oldValue.DoneAt, nil
}

// ClearDoneAt clears the value of the "done_at" field.
func (m *TodoMutation) ClearDoneAt() {
	m.done_at = nil
	m.clearedFields[todo.FieldDoneAt] = struct{}{}
}

// DoneAtCleared returns if the "done_at" field was cleared in this mutation.
func (m *TodoMutation) DoneAtCleared() bool {
	_, ok := m.clearedFields[todo.FieldDoneAt]
	return ok
}

// ResetDoneAt resets all changes to the "done_at" field.
func (m *TodoMutation) ResetDoneAt() {
	m.done_at = nil
	delete(m.clearedFields, todo.FieldDoneAt)
}

// SetOwnerID sets the "owner_id" field.
func (m *TodoMutation) SetOwnerID(i int) {
	m.owner = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *TodoMutation) OwnerID() (r int, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Todo entity.
// If the Todo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TodoMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *TodoMutation) ResetOwnerID() {
	m.owner = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *TodoMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[todo.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *TodoMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *TodoMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *TodoMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddReminderIDs adds the "reminders" edge to the Reminder entity by ids.
func (m *TodoMutation) AddReminderIDs(ids ...int) {
	if m.reminders == nil {
		m.reminders = make(map[int]struct{})
	}
	for i := range ids {
		m.reminders[ids[i]] = struct{}{}
	}
}

// ClearReminders clears the "reminders" edge to the Reminder entity.
func (m *TodoMutation) ClearReminders() {
	m.clearedreminders = true
}

// RemindersCleared reports if the "reminders" edge to the Reminder entity was cleared.
func (m *TodoMutation) RemindersCleared() bool {
	return m.clearedreminders
}

// RemoveReminderIDs removes the "reminders" edge to the Reminder entity by IDs.
func (m *TodoMutation) RemoveReminderIDs(ids ...int) {
	if m.removedreminders == nil {
		m.removedreminders = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reminders, ids[i])
		m.removedreminders[ids[i]] = struct{}{}
	}
}

// RemovedReminders returns the removed IDs of the "reminders" edge to the Reminder entity.
func (m *TodoMutation) RemovedRemindersIDs() (ids []int) {
	for id := range m.removedreminders {
		ids = append(ids, id)
	}
	return
}

// RemindersIDs returns the "reminders" edge IDs in the mutation.
func (m *TodoMutation) RemindersIDs() (ids []int) {
	for id := range m.reminders {
		ids = append(ids, id)
	}
	return
}

// ResetReminders resets all changes to the "reminders" edge.
func (m *TodoMutation) ResetReminders() {
	m.reminders = nil
	m.clearedreminders = false
	m.removedreminders = nil
}

// Where appends a list predicates to the TodoMutation builder.
func (m *TodoMutation) Where(ps ...predicate.Todo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Todo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Todo).
func (m *TodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.text != nil {
		fields = append(fields, todo.FieldText)
	}
	if m.done_at != nil {
		fields = append(fields, todo.FieldDoneAt)
	}
	if m.owner != nil {
		fields = append(fields, todo.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todo.FieldText:
		return m.Text()
	case todo.FieldDoneAt:
		return m.DoneAt()
	case todo.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case todo.FieldText:
		return m.OldText(ctx)
	case todo.FieldDoneAt:
		return m.OldDoneAt(ctx)
	case todo.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown Todo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todo.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case todo.FieldDoneAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoneAt(v)
		return nil
	case todo.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Todo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(todo.FieldDoneAt) {
		fields = append(fields, todo.FieldDoneAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoMutation) ClearField(name string) error {
	switch name {
	case todo.FieldDoneAt:
		m.ClearDoneAt()
		return nil
	}
	return fmt.Errorf("unknown Todo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoMutation) ResetField(name string) error {
	switch name {
	case todo.FieldText:
		m.ResetText()
		return nil
	case todo.FieldDoneAt:
		m.ResetDoneAt()
		return nil
	case todo.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, todo.EdgeOwner)
	}
	if m.reminders != nil {
		edges = append(edges, todo.EdgeReminders)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case todo.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case todo.EdgeReminders:
		ids := make([]ent.Value, 0, len(m.reminders))
		for id := range m.reminders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedreminders != nil {
		edges = append(edges, todo.EdgeReminders)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case todo.EdgeReminders:
		ids := make([]ent.Value, 0, len(m.removedreminders))
		for id := range m.removedreminders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner {
		edges = append(edges, todo.EdgeOwner)
	}
	if m.clearedreminders {
		edges = append(edges, todo.EdgeReminders)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoMutation) EdgeCleared(name string) bool {
	switch name {
	case todo.EdgeOwner:
		return m.clearedowner
	case todo.EdgeReminders:
		return m.clearedreminders
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoMutation) ClearEdge(name string) error {
	switch name {
	case todo.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Todo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoMutation) ResetEdge(name string) error {
	switch name {
	case todo.EdgeOwner:
		m.ResetOwner()
		return nil
	case todo.EdgeReminders:
		m.ResetReminders()
		return nil
	}
	return fmt.Errorf("unknown Todo edge %s", name)
}

// TodoReminderMutation represents an operation that mutates the TodoReminder nodes in the graph.
type TodoReminderMutation struct {
	config
	op              Op
	typ             string
	clearedFields   map[string]struct{}
	todo            *int
	clearedtodo     bool
	reminder        *int
	clearedreminder bool
	done            bool
	oldValue        func(context.Context) (*TodoReminder, error)
	predicates      []predicate.TodoReminder
}

var _ ent.Mutation = (*TodoReminderMutation)(nil)

// todoreminderOption allows management of the mutation configuration using functional options.
type todoreminderOption func(*TodoReminderMutation)

// newTodoReminderMutation creates new mutation for the TodoReminder entity.
func newTodoReminderMutation(c config, op Op, opts ...todoreminderOption) *TodoReminderMutation {
	m := &TodoReminderMutation{
		config:        c,
		op:            op,
		typ:           TypeTodoReminder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoReminderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoReminderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetTodoID sets the "todo_id" field.
func (m *TodoReminderMutation) SetTodoID(i int) {
	m.todo = &i
}

// TodoID returns the value of the "todo_id" field in the mutation.
func (m *TodoReminderMutation) TodoID() (r int, exists bool) {
	v := m.todo
	if v == nil {
		return
	}
	return *v, true
}

// ResetTodoID resets all changes to the "todo_id" field.
func (m *TodoReminderMutation) ResetTodoID() {
	m.todo = nil
}

// SetReminderID sets the "reminder_id" field.
func (m *TodoReminderMutation) SetReminderID(i int) {
	m.reminder = &i
}

// ReminderID returns the value of the "reminder_id" field in the mutation.
func (m *TodoReminderMutation) ReminderID() (r int, exists bool) {
	v := m.reminder
	if v == nil {
		return
	}
	return *v, true
}

// ResetReminderID resets all changes to the "reminder_id" field.
func (m *TodoReminderMutation) ResetReminderID() {
	m.reminder = nil
}

// ClearTodo clears the "todo" edge to the Todo entity.
func (m *TodoReminderMutation) ClearTodo() {
	m.clearedtodo = true
	m.clearedFields[todoreminder.FieldTodoID] = struct{}{}
}

// TodoCleared reports if the "todo" edge to the Todo entity was cleared.
func (m *TodoReminderMutation) TodoCleared() bool {
	return m.clearedtodo
}

// TodoIDs returns the "todo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TodoID instead. It exists only for internal usage by the builders.
func (m *TodoReminderMutation) TodoIDs() (ids []int) {
	if id := m.todo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTodo resets all changes to the "todo" edge.
func (m *TodoReminderMutation) ResetTodo() {
	m.todo = nil
	m.clearedtodo = false
}

// ClearReminder clears the "reminder" edge to the Reminder entity.
func (m *TodoReminderMutation) ClearReminder() {
	m.clearedreminder = true
	m.clearedFields[todoreminder.FieldReminderID] = struct{}{}
}

// ReminderCleared reports if the "reminder" edge to the Reminder entity was cleared.
func (m *TodoReminderMutation) ReminderCleared() bool {
	return m.clearedreminder
}

// ReminderIDs returns the "reminder" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReminderID instead. It exists only for internal usage by the builders.
func (m *TodoReminderMutation) ReminderIDs() (ids []int) {
	if id := m.reminder; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReminder resets all changes to the "reminder" edge.
func (m *TodoReminderMutation) ResetReminder() {
	m.reminder = nil
	m.clearedreminder = false
}

// Where appends a list predicates to the TodoReminderMutation builder.
func (m *TodoReminderMutation) Where(ps ...predicate.TodoReminder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoReminderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoReminderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TodoReminder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoReminderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoReminderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TodoReminder).
func (m *TodoReminderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoReminderMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.todo != nil {
		fields = append(fields, todoreminder.FieldTodoID)
	}
	if m.reminder != nil {
		fields = append(fields, todoreminder.FieldReminderID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoReminderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case todoreminder.FieldTodoID:
		return m.TodoID()
	case todoreminder.FieldReminderID:
		return m.ReminderID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoReminderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema TodoReminder does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoReminderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case todoreminder.FieldTodoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTodoID(v)
		return nil
	case todoreminder.FieldReminderID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReminderID(v)
		return nil
	}
	return fmt.Errorf("unknown TodoReminder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoReminderMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoReminderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoReminderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TodoReminder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoReminderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoReminderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoReminderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TodoReminder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoReminderMutation) ResetField(name string) error {
	switch name {
	case todoreminder.FieldTodoID:
		m.ResetTodoID()
		return nil
	case todoreminder.FieldReminderID:
		m.ResetReminderID()
		return nil
	}
	return fmt.Errorf("unknown TodoReminder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoReminderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.todo != nil {
		edges = append(edges, todoreminder.EdgeTodo)
	}
	if m.reminder != nil {
		edges = append(edges, todoreminder.EdgeReminder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoReminderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case todoreminder.EdgeTodo:
		if id := m.todo; id != nil {
			return []ent.Value{*id}
		}
	case todoreminder.EdgeReminder:
		if id := m.reminder; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoReminderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoReminderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoReminderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtodo {
		edges = append(edges, todoreminder.EdgeTodo)
	}
	if m.clearedreminder {
		edges = append(edges, todoreminder.EdgeReminder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoReminderMutation) EdgeCleared(name string) bool {
	switch name {
	case todoreminder.EdgeTodo:
		return m.clearedtodo
	case todoreminder.EdgeReminder:
		return m.clearedreminder
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoReminderMutation) ClearEdge(name string) error {
	switch name {
	case todoreminder.EdgeTodo:
		m.ClearTodo()
		return nil
	case todoreminder.EdgeReminder:
		m.ClearReminder()
		return nil
	}
	return fmt.Errorf("unknown TodoReminder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoReminderMutation) ResetEdge(name string) error {
	switch name {
	case todoreminder.EdgeTodo:
		m.ResetTodo()
		return nil
	case todoreminder.EdgeReminder:
		m.ResetReminder()
		return nil
	}
	return fmt.Errorf("unknown TodoReminder edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	name                        *string
	clearedFields               map[string]struct{}
	todos                       map[int]struct{}
	removedtodos                map[int]struct{}
	clearedtodos                bool
	moderator_users             map[int]struct{}
	removedmoderator_users      map[int]struct{}
	clearedmoderator_users      bool
	moderators                  map[int]struct{}
	removedmoderators           map[int]struct{}
	clearedmoderators           bool
	people_partner_users        map[int]struct{}
	removedpeople_partner_users map[int]struct{}
	clearedpeople_partner_users bool
	people_partner              map[int]struct{}
	removedpeople_partner       map[int]struct{}
	clearedpeople_partner       bool
	done                        bool
	oldValue                    func(context.Context) (*User, error)
	predicates                  []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// AddTodoIDs adds the "todos" edge to the Todo entity by ids.
func (m *UserMutation) AddTodoIDs(ids ...int) {
	if m.todos == nil {
		m.todos = make(map[int]struct{})
	}
	for i := range ids {
		m.todos[ids[i]] = struct{}{}
	}
}

// ClearTodos clears the "todos" edge to the Todo entity.
func (m *UserMutation) ClearTodos() {
	m.clearedtodos = true
}

// TodosCleared reports if the "todos" edge to the Todo entity was cleared.
func (m *UserMutation) TodosCleared() bool {
	return m.clearedtodos
}

// RemoveTodoIDs removes the "todos" edge to the Todo entity by IDs.
func (m *UserMutation) RemoveTodoIDs(ids ...int) {
	if m.removedtodos == nil {
		m.removedtodos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.todos, ids[i])
		m.removedtodos[ids[i]] = struct{}{}
	}
}

// RemovedTodos returns the removed IDs of the "todos" edge to the Todo entity.
func (m *UserMutation) RemovedTodosIDs() (ids []int) {
	for id := range m.removedtodos {
		ids = append(ids, id)
	}
	return
}

// TodosIDs returns the "todos" edge IDs in the mutation.
func (m *UserMutation) TodosIDs() (ids []int) {
	for id := range m.todos {
		ids = append(ids, id)
	}
	return
}

// ResetTodos resets all changes to the "todos" edge.
func (m *UserMutation) ResetTodos() {
	m.todos = nil
	m.clearedtodos = false
	m.removedtodos = nil
}

// AddModeratorUserIDs adds the "moderator_users" edge to the User entity by ids.
func (m *UserMutation) AddModeratorUserIDs(ids ...int) {
	if m.moderator_users == nil {
		m.moderator_users = make(map[int]struct{})
	}
	for i := range ids {
		m.moderator_users[ids[i]] = struct{}{}
	}
}

// ClearModeratorUsers clears the "moderator_users" edge to the User entity.
func (m *UserMutation) ClearModeratorUsers() {
	m.clearedmoderator_users = true
}

// ModeratorUsersCleared reports if the "moderator_users" edge to the User entity was cleared.
func (m *UserMutation) ModeratorUsersCleared() bool {
	return m.clearedmoderator_users
}

// RemoveModeratorUserIDs removes the "moderator_users" edge to the User entity by IDs.
func (m *UserMutation) RemoveModeratorUserIDs(ids ...int) {
	if m.removedmoderator_users == nil {
		m.removedmoderator_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.moderator_users, ids[i])
		m.removedmoderator_users[ids[i]] = struct{}{}
	}
}

// RemovedModeratorUsers returns the removed IDs of the "moderator_users" edge to the User entity.
func (m *UserMutation) RemovedModeratorUsersIDs() (ids []int) {
	for id := range m.removedmoderator_users {
		ids = append(ids, id)
	}
	return
}

// ModeratorUsersIDs returns the "moderator_users" edge IDs in the mutation.
func (m *UserMutation) ModeratorUsersIDs() (ids []int) {
	for id := range m.moderator_users {
		ids = append(ids, id)
	}
	return
}

// ResetModeratorUsers resets all changes to the "moderator_users" edge.
func (m *UserMutation) ResetModeratorUsers() {
	m.moderator_users = nil
	m.clearedmoderator_users = false
	m.removedmoderator_users = nil
}

// AddModeratorIDs adds the "moderators" edge to the User entity by ids.
func (m *UserMutation) AddModeratorIDs(ids ...int) {
	if m.moderators == nil {
		m.moderators = make(map[int]struct{})
	}
	for i := range ids {
		m.moderators[ids[i]] = struct{}{}
	}
}

// ClearModerators clears the "moderators" edge to the User entity.
func (m *UserMutation) ClearModerators() {
	m.clearedmoderators = true
}

// ModeratorsCleared reports if the "moderators" edge to the User entity was cleared.
func (m *UserMutation) ModeratorsCleared() bool {
	return m.clearedmoderators
}

// RemoveModeratorIDs removes the "moderators" edge to the User entity by IDs.
func (m *UserMutation) RemoveModeratorIDs(ids ...int) {
	if m.removedmoderators == nil {
		m.removedmoderators = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.moderators, ids[i])
		m.removedmoderators[ids[i]] = struct{}{}
	}
}

// RemovedModerators returns the removed IDs of the "moderators" edge to the User entity.
func (m *UserMutation) RemovedModeratorsIDs() (ids []int) {
	for id := range m.removedmoderators {
		ids = append(ids, id)
	}
	return
}

// ModeratorsIDs returns the "moderators" edge IDs in the mutation.
func (m *UserMutation) ModeratorsIDs() (ids []int) {
	for id := range m.moderators {
		ids = append(ids, id)
	}
	return
}

// ResetModerators resets all changes to the "moderators" edge.
func (m *UserMutation) ResetModerators() {
	m.moderators = nil
	m.clearedmoderators = false
	m.removedmoderators = nil
}

// AddPeoplePartnerUserIDs adds the "people_partner_users" edge to the User entity by ids.
func (m *UserMutation) AddPeoplePartnerUserIDs(ids ...int) {
	if m.people_partner_users == nil {
		m.people_partner_users = make(map[int]struct{})
	}
	for i := range ids {
		m.people_partner_users[ids[i]] = struct{}{}
	}
}

// ClearPeoplePartnerUsers clears the "people_partner_users" edge to the User entity.
func (m *UserMutation) ClearPeoplePartnerUsers() {
	m.clearedpeople_partner_users = true
}

// PeoplePartnerUsersCleared reports if the "people_partner_users" edge to the User entity was cleared.
func (m *UserMutation) PeoplePartnerUsersCleared() bool {
	return m.clearedpeople_partner_users
}

// RemovePeoplePartnerUserIDs removes the "people_partner_users" edge to the User entity by IDs.
func (m *UserMutation) RemovePeoplePartnerUserIDs(ids ...int) {
	if m.removedpeople_partner_users == nil {
		m.removedpeople_partner_users = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.people_partner_users, ids[i])
		m.removedpeople_partner_users[ids[i]] = struct{}{}
	}
}

// RemovedPeoplePartnerUsers returns the removed IDs of the "people_partner_users" edge to the User entity.
func (m *UserMutation) RemovedPeoplePartnerUsersIDs() (ids []int) {
	for id := range m.removedpeople_partner_users {
		ids = append(ids, id)
	}
	return
}

// PeoplePartnerUsersIDs returns the "people_partner_users" edge IDs in the mutation.
func (m *UserMutation) PeoplePartnerUsersIDs() (ids []int) {
	for id := range m.people_partner_users {
		ids = append(ids, id)
	}
	return
}

// ResetPeoplePartnerUsers resets all changes to the "people_partner_users" edge.
func (m *UserMutation) ResetPeoplePartnerUsers() {
	m.people_partner_users = nil
	m.clearedpeople_partner_users = false
	m.removedpeople_partner_users = nil
}

// AddPeoplePartnerIDs adds the "people_partner" edge to the User entity by ids.
func (m *UserMutation) AddPeoplePartnerIDs(ids ...int) {
	if m.people_partner == nil {
		m.people_partner = make(map[int]struct{})
	}
	for i := range ids {
		m.people_partner[ids[i]] = struct{}{}
	}
}

// ClearPeoplePartner clears the "people_partner" edge to the User entity.
func (m *UserMutation) ClearPeoplePartner() {
	m.clearedpeople_partner = true
}

// PeoplePartnerCleared reports if the "people_partner" edge to the User entity was cleared.
func (m *UserMutation) PeoplePartnerCleared() bool {
	return m.clearedpeople_partner
}

// RemovePeoplePartnerIDs removes the "people_partner" edge to the User entity by IDs.
func (m *UserMutation) RemovePeoplePartnerIDs(ids ...int) {
	if m.removedpeople_partner == nil {
		m.removedpeople_partner = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.people_partner, ids[i])
		m.removedpeople_partner[ids[i]] = struct{}{}
	}
}

// RemovedPeoplePartner returns the removed IDs of the "people_partner" edge to the User entity.
func (m *UserMutation) RemovedPeoplePartnerIDs() (ids []int) {
	for id := range m.removedpeople_partner {
		ids = append(ids, id)
	}
	return
}

// PeoplePartnerIDs returns the "people_partner" edge IDs in the mutation.
func (m *UserMutation) PeoplePartnerIDs() (ids []int) {
	for id := range m.people_partner {
		ids = append(ids, id)
	}
	return
}

// ResetPeoplePartner resets all changes to the "people_partner" edge.
func (m *UserMutation) ResetPeoplePartner() {
	m.people_partner = nil
	m.clearedpeople_partner = false
	m.removedpeople_partner = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.todos != nil {
		edges = append(edges, user.EdgeTodos)
	}
	if m.moderator_users != nil {
		edges = append(edges, user.EdgeModeratorUsers)
	}
	if m.moderators != nil {
		edges = append(edges, user.EdgeModerators)
	}
	if m.people_partner_users != nil {
		edges = append(edges, user.EdgePeoplePartnerUsers)
	}
	if m.people_partner != nil {
		edges = append(edges, user.EdgePeoplePartner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTodos:
		ids := make([]ent.Value, 0, len(m.todos))
		for id := range m.todos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModeratorUsers:
		ids := make([]ent.Value, 0, len(m.moderator_users))
		for id := range m.moderator_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModerators:
		ids := make([]ent.Value, 0, len(m.moderators))
		for id := range m.moderators {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePeoplePartnerUsers:
		ids := make([]ent.Value, 0, len(m.people_partner_users))
		for id := range m.people_partner_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePeoplePartner:
		ids := make([]ent.Value, 0, len(m.people_partner))
		for id := range m.people_partner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedtodos != nil {
		edges = append(edges, user.EdgeTodos)
	}
	if m.removedmoderator_users != nil {
		edges = append(edges, user.EdgeModeratorUsers)
	}
	if m.removedmoderators != nil {
		edges = append(edges, user.EdgeModerators)
	}
	if m.removedpeople_partner_users != nil {
		edges = append(edges, user.EdgePeoplePartnerUsers)
	}
	if m.removedpeople_partner != nil {
		edges = append(edges, user.EdgePeoplePartner)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTodos:
		ids := make([]ent.Value, 0, len(m.removedtodos))
		for id := range m.removedtodos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModeratorUsers:
		ids := make([]ent.Value, 0, len(m.removedmoderator_users))
		for id := range m.removedmoderator_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModerators:
		ids := make([]ent.Value, 0, len(m.removedmoderators))
		for id := range m.removedmoderators {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePeoplePartnerUsers:
		ids := make([]ent.Value, 0, len(m.removedpeople_partner_users))
		for id := range m.removedpeople_partner_users {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePeoplePartner:
		ids := make([]ent.Value, 0, len(m.removedpeople_partner))
		for id := range m.removedpeople_partner {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedtodos {
		edges = append(edges, user.EdgeTodos)
	}
	if m.clearedmoderator_users {
		edges = append(edges, user.EdgeModeratorUsers)
	}
	if m.clearedmoderators {
		edges = append(edges, user.EdgeModerators)
	}
	if m.clearedpeople_partner_users {
		edges = append(edges, user.EdgePeoplePartnerUsers)
	}
	if m.clearedpeople_partner {
		edges = append(edges, user.EdgePeoplePartner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTodos:
		return m.clearedtodos
	case user.EdgeModeratorUsers:
		return m.clearedmoderator_users
	case user.EdgeModerators:
		return m.clearedmoderators
	case user.EdgePeoplePartnerUsers:
		return m.clearedpeople_partner_users
	case user.EdgePeoplePartner:
		return m.clearedpeople_partner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTodos:
		m.ResetTodos()
		return nil
	case user.EdgeModeratorUsers:
		m.ResetModeratorUsers()
		return nil
	case user.EdgeModerators:
		m.ResetModerators()
		return nil
	case user.EdgePeoplePartnerUsers:
		m.ResetPeoplePartnerUsers()
		return nil
	case user.EdgePeoplePartner:
		m.ResetPeoplePartner()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
