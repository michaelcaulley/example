// Code generated by ent, DO NOT EDIT.

package peoplepartner

import (
	"example/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	"example/internal/ent/internal"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldEQ(FieldUserID, v))
}

// PeoplePartnerUserID applies equality check predicate on the "people_partner_user_id" field. It's identical to PeoplePartnerUserIDEQ.
func PeoplePartnerUserID(v int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldEQ(FieldPeoplePartnerUserID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldNotIn(FieldUserID, vs...))
}

// PeoplePartnerUserIDEQ applies the EQ predicate on the "people_partner_user_id" field.
func PeoplePartnerUserIDEQ(v int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldEQ(FieldPeoplePartnerUserID, v))
}

// PeoplePartnerUserIDNEQ applies the NEQ predicate on the "people_partner_user_id" field.
func PeoplePartnerUserIDNEQ(v int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldNEQ(FieldPeoplePartnerUserID, v))
}

// PeoplePartnerUserIDIn applies the In predicate on the "people_partner_user_id" field.
func PeoplePartnerUserIDIn(vs ...int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldIn(FieldPeoplePartnerUserID, vs...))
}

// PeoplePartnerUserIDNotIn applies the NotIn predicate on the "people_partner_user_id" field.
func PeoplePartnerUserIDNotIn(vs ...int) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.FieldNotIn(FieldPeoplePartnerUserID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PeoplePartner {
	return predicate.PeoplePartner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PeoplePartner
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PeoplePartner {
	return predicate.PeoplePartner(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PeoplePartner
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPeoplePartner applies the HasEdge predicate on the "people_partner" edge.
func HasPeoplePartner() predicate.PeoplePartner {
	return predicate.PeoplePartner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, PeoplePartnerColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, PeoplePartnerTable, PeoplePartnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PeoplePartner
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPeoplePartnerWith applies the HasEdge predicate on the "people_partner" edge with a given conditions (other predicates).
func HasPeoplePartnerWith(preds ...predicate.User) predicate.PeoplePartner {
	return predicate.PeoplePartner(func(s *sql.Selector) {
		step := newPeoplePartnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PeoplePartner
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PeoplePartner) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PeoplePartner) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PeoplePartner) predicate.PeoplePartner {
	return predicate.PeoplePartner(sql.NotPredicates(p))
}
