// Code generated by ent, DO NOT EDIT.

package peoplepartner

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the peoplepartner type in the database.
	Label = "people_partner"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldPeoplePartnerUserID holds the string denoting the people_partner_user_id field in the database.
	FieldPeoplePartnerUserID = "people_partner_user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePeoplePartner holds the string denoting the people_partner edge name in mutations.
	EdgePeoplePartner = "people_partner"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// Table holds the table name of the peoplepartner in the database.
	Table = "people_partners"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "people_partners"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PeoplePartnerTable is the table that holds the people_partner relation/edge.
	PeoplePartnerTable = "people_partners"
	// PeoplePartnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	PeoplePartnerInverseTable = "users"
	// PeoplePartnerColumn is the table column denoting the people_partner relation/edge.
	PeoplePartnerColumn = "people_partner_user_id"
)

// Columns holds all SQL columns for peoplepartner fields.
var Columns = []string{
	FieldUserID,
	FieldPeoplePartnerUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PeoplePartner queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByPeoplePartnerUserID orders the results by the people_partner_user_id field.
func ByPeoplePartnerUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeoplePartnerUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPeoplePartnerField orders the results by people_partner field.
func ByPeoplePartnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPeoplePartnerStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newPeoplePartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, PeoplePartnerColumn),
		sqlgraph.To(PeoplePartnerInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PeoplePartnerTable, PeoplePartnerColumn),
	)
}
