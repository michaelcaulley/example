// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"example/internal/ent/predicate"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todoreminder"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// TodoReminderQuery is the builder for querying TodoReminder entities.
type TodoReminderQuery struct {
	config
	ctx          *QueryContext
	order        []todoreminder.OrderOption
	inters       []Interceptor
	predicates   []predicate.TodoReminder
	withTodo     *TodoQuery
	withReminder *ReminderQuery
	loadTotal    []func(context.Context, []*TodoReminder) error
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TodoReminderQuery builder.
func (_q *TodoReminderQuery) Where(ps ...predicate.TodoReminder) *TodoReminderQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *TodoReminderQuery) Limit(limit int) *TodoReminderQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *TodoReminderQuery) Offset(offset int) *TodoReminderQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *TodoReminderQuery) Unique(unique bool) *TodoReminderQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *TodoReminderQuery) Order(o ...todoreminder.OrderOption) *TodoReminderQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryTodo chains the current query on the "todo" edge.
func (_q *TodoReminderQuery) QueryTodo() *TodoQuery {
	query := (&TodoClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(todoreminder.Table, todoreminder.TodoColumn, selector),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, todoreminder.TodoTable, todoreminder.TodoColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReminder chains the current query on the "reminder" edge.
func (_q *TodoReminderQuery) QueryReminder() *ReminderQuery {
	query := (&ReminderClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(todoreminder.Table, todoreminder.ReminderColumn, selector),
			sqlgraph.To(reminder.Table, reminder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, todoreminder.ReminderTable, todoreminder.ReminderColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TodoReminder entity from the query.
// Returns a *NotFoundError when no TodoReminder was found.
func (_q *TodoReminderQuery) First(ctx context.Context) (*TodoReminder, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{todoreminder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *TodoReminderQuery) FirstX(ctx context.Context) *TodoReminder {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single TodoReminder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TodoReminder entity is found.
// Returns a *NotFoundError when no TodoReminder entities are found.
func (_q *TodoReminderQuery) Only(ctx context.Context) (*TodoReminder, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{todoreminder.Label}
	default:
		return nil, &NotSingularError{todoreminder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *TodoReminderQuery) OnlyX(ctx context.Context) *TodoReminder {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of TodoReminders.
func (_q *TodoReminderQuery) All(ctx context.Context) ([]*TodoReminder, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TodoReminder, *TodoReminderQuery]()
	return withInterceptors[[]*TodoReminder](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *TodoReminderQuery) AllX(ctx context.Context) []*TodoReminder {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (_q *TodoReminderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*TodoReminderQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *TodoReminderQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *TodoReminderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *TodoReminderQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TodoReminderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *TodoReminderQuery) Clone() *TodoReminderQuery {
	if _q == nil {
		return nil
	}
	return &TodoReminderQuery{
		config:       _q.config,
		ctx:          _q.ctx.Clone(),
		order:        append([]todoreminder.OrderOption{}, _q.order...),
		inters:       append([]Interceptor{}, _q.inters...),
		predicates:   append([]predicate.TodoReminder{}, _q.predicates...),
		withTodo:     _q.withTodo.Clone(),
		withReminder: _q.withReminder.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithTodo tells the query-builder to eager-load the nodes that are connected to
// the "todo" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *TodoReminderQuery) WithTodo(opts ...func(*TodoQuery)) *TodoReminderQuery {
	query := (&TodoClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTodo = query
	return _q
}

// WithReminder tells the query-builder to eager-load the nodes that are connected to
// the "reminder" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *TodoReminderQuery) WithReminder(opts ...func(*ReminderQuery)) *TodoReminderQuery {
	query := (&ReminderClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withReminder = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TodoID int `json:"todo_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TodoReminder.Query().
//		GroupBy(todoreminder.FieldTodoID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *TodoReminderQuery) GroupBy(field string, fields ...string) *TodoReminderGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TodoReminderGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = todoreminder.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TodoID int `json:"todo_id,omitempty"`
//	}
//
//	client.TodoReminder.Query().
//		Select(todoreminder.FieldTodoID).
//		Scan(ctx, &v)
func (_q *TodoReminderQuery) Select(fields ...string) *TodoReminderSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &TodoReminderSelect{TodoReminderQuery: _q}
	sbuild.label = todoreminder.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TodoReminderSelect configured with the given aggregations.
func (_q *TodoReminderQuery) Aggregate(fns ...AggregateFunc) *TodoReminderSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *TodoReminderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !todoreminder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *TodoReminderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TodoReminder, error) {
	var (
		nodes       = []*TodoReminder{}
		_spec       = _q.querySpec()
		loadedTypes = [2]bool{
			_q.withTodo != nil,
			_q.withReminder != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TodoReminder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TodoReminder{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withTodo; query != nil {
		if err := _q.loadTodo(ctx, query, nodes, nil,
			func(n *TodoReminder, e *Todo) { n.Edges.Todo = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withReminder; query != nil {
		if err := _q.loadReminder(ctx, query, nodes, nil,
			func(n *TodoReminder, e *Reminder) { n.Edges.Reminder = e }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *TodoReminderQuery) loadTodo(ctx context.Context, query *TodoQuery, nodes []*TodoReminder, init func(*TodoReminder), assign func(*TodoReminder, *Todo)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TodoReminder)
	for i := range nodes {
		fk := nodes[i].TodoID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(todo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "todo_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *TodoReminderQuery) loadReminder(ctx context.Context, query *ReminderQuery, nodes []*TodoReminder, init func(*TodoReminder), assign func(*TodoReminder, *Reminder)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TodoReminder)
	for i := range nodes {
		fk := nodes[i].ReminderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(reminder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "reminder_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (_q *TodoReminderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *TodoReminderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(todoreminder.Table, todoreminder.Columns, nil)
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if _q.withTodo != nil {
			_spec.Node.AddColumnOnce(todoreminder.FieldTodoID)
		}
		if _q.withReminder != nil {
			_spec.Node.AddColumnOnce(todoreminder.FieldReminderID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *TodoReminderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(todoreminder.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = todoreminder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *TodoReminderQuery) Modify(modifiers ...func(s *sql.Selector)) *TodoReminderSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// TodoReminderGroupBy is the group-by builder for TodoReminder entities.
type TodoReminderGroupBy struct {
	selector
	build *TodoReminderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TodoReminderGroupBy) Aggregate(fns ...AggregateFunc) *TodoReminderGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the selector query and scans the result into the given value.
func (trgb *TodoReminderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, trgb.build.ctx, ent.OpQueryGroupBy)
	if err := trgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TodoReminderQuery, *TodoReminderGroupBy](ctx, trgb.build, trgb, trgb.build.inters, v)
}

func (trgb *TodoReminderGroupBy) sqlScan(ctx context.Context, root *TodoReminderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(trgb.fns))
	for _, fn := range trgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*trgb.flds)+len(trgb.fns))
		for _, f := range *trgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*trgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TodoReminderSelect is the builder for selecting fields of TodoReminder entities.
type TodoReminderSelect struct {
	*TodoReminderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (trs *TodoReminderSelect) Aggregate(fns ...AggregateFunc) *TodoReminderSelect {
	trs.fns = append(trs.fns, fns...)
	return trs
}

// Scan applies the selector query and scans the result into the given value.
func (trs *TodoReminderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, trs.ctx, ent.OpQuerySelect)
	if err := trs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TodoReminderQuery, *TodoReminderSelect](ctx, trs.TodoReminderQuery, trs, trs.inters, v)
}

func (trs *TodoReminderSelect) sqlScan(ctx context.Context, root *TodoReminderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(trs.fns))
	for _, fn := range trs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*trs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (trs *TodoReminderSelect) Modify(modifiers ...func(s *sql.Selector)) *TodoReminderSelect {
	trs.modifiers = append(trs.modifiers, modifiers...)
	return trs
}
