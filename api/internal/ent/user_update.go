// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/predicate"
	"example/internal/ent/todo"
	"example/internal/ent/user"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"example/internal/ent/internal"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (_u *UserUpdate) AddTodoIDs(ids ...int) *UserUpdate {
	_u.mutation.AddTodoIDs(ids...)
	return _u
}

// AddTodos adds the "todos" edges to the Todo entity.
func (_u *UserUpdate) AddTodos(v ...*Todo) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTodoIDs(ids...)
}

// AddModeratorUserIDs adds the "moderator_users" edge to the User entity by IDs.
func (_u *UserUpdate) AddModeratorUserIDs(ids ...int) *UserUpdate {
	_u.mutation.AddModeratorUserIDs(ids...)
	return _u
}

// AddModeratorUsers adds the "moderator_users" edges to the User entity.
func (_u *UserUpdate) AddModeratorUsers(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddModeratorUserIDs(ids...)
}

// AddModeratorIDs adds the "moderators" edge to the User entity by IDs.
func (_u *UserUpdate) AddModeratorIDs(ids ...int) *UserUpdate {
	_u.mutation.AddModeratorIDs(ids...)
	return _u
}

// AddModerators adds the "moderators" edges to the User entity.
func (_u *UserUpdate) AddModerators(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddModeratorIDs(ids...)
}

// AddPeoplePartnerUserIDs adds the "people_partner_users" edge to the User entity by IDs.
func (_u *UserUpdate) AddPeoplePartnerUserIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPeoplePartnerUserIDs(ids...)
	return _u
}

// AddPeoplePartnerUsers adds the "people_partner_users" edges to the User entity.
func (_u *UserUpdate) AddPeoplePartnerUsers(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPeoplePartnerUserIDs(ids...)
}

// AddPeoplePartnerIDs adds the "people_partner" edge to the User entity by IDs.
func (_u *UserUpdate) AddPeoplePartnerIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPeoplePartnerIDs(ids...)
	return _u
}

// AddPeoplePartner adds the "people_partner" edges to the User entity.
func (_u *UserUpdate) AddPeoplePartner(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPeoplePartnerIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (_u *UserUpdate) ClearTodos() *UserUpdate {
	_u.mutation.ClearTodos()
	return _u
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (_u *UserUpdate) RemoveTodoIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveTodoIDs(ids...)
	return _u
}

// RemoveTodos removes "todos" edges to Todo entities.
func (_u *UserUpdate) RemoveTodos(v ...*Todo) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTodoIDs(ids...)
}

// ClearModeratorUsers clears all "moderator_users" edges to the User entity.
func (_u *UserUpdate) ClearModeratorUsers() *UserUpdate {
	_u.mutation.ClearModeratorUsers()
	return _u
}

// RemoveModeratorUserIDs removes the "moderator_users" edge to User entities by IDs.
func (_u *UserUpdate) RemoveModeratorUserIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveModeratorUserIDs(ids...)
	return _u
}

// RemoveModeratorUsers removes "moderator_users" edges to User entities.
func (_u *UserUpdate) RemoveModeratorUsers(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveModeratorUserIDs(ids...)
}

// ClearModerators clears all "moderators" edges to the User entity.
func (_u *UserUpdate) ClearModerators() *UserUpdate {
	_u.mutation.ClearModerators()
	return _u
}

// RemoveModeratorIDs removes the "moderators" edge to User entities by IDs.
func (_u *UserUpdate) RemoveModeratorIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveModeratorIDs(ids...)
	return _u
}

// RemoveModerators removes "moderators" edges to User entities.
func (_u *UserUpdate) RemoveModerators(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveModeratorIDs(ids...)
}

// ClearPeoplePartnerUsers clears all "people_partner_users" edges to the User entity.
func (_u *UserUpdate) ClearPeoplePartnerUsers() *UserUpdate {
	_u.mutation.ClearPeoplePartnerUsers()
	return _u
}

// RemovePeoplePartnerUserIDs removes the "people_partner_users" edge to User entities by IDs.
func (_u *UserUpdate) RemovePeoplePartnerUserIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePeoplePartnerUserIDs(ids...)
	return _u
}

// RemovePeoplePartnerUsers removes "people_partner_users" edges to User entities.
func (_u *UserUpdate) RemovePeoplePartnerUsers(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePeoplePartnerUserIDs(ids...)
}

// ClearPeoplePartner clears all "people_partner" edges to the User entity.
func (_u *UserUpdate) ClearPeoplePartner() *UserUpdate {
	_u.mutation.ClearPeoplePartner()
	return _u
}

// RemovePeoplePartnerIDs removes the "people_partner" edge to User entities by IDs.
func (_u *UserUpdate) RemovePeoplePartnerIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePeoplePartnerIDs(ids...)
	return _u
}

// RemovePeoplePartner removes "people_partner" edges to User entities.
func (_u *UserUpdate) RemovePeoplePartner(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePeoplePartnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Todo
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTodosIDs(); len(nodes) > 0 && !_u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Todo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Todo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModeratorUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserModerators
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedModeratorUsersIDs(); len(nodes) > 0 && !_u.mutation.ModeratorUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserModerators
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModeratorUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserModerators
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModeratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Moderator
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedModeratorsIDs(); len(nodes) > 0 && !_u.mutation.ModeratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Moderator
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModeratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Moderator
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PeoplePartnerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PeoplePartnerUsersTable,
			Columns: user.PeoplePartnerUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserPeoplePartner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPeoplePartnerUsersIDs(); len(nodes) > 0 && !_u.mutation.PeoplePartnerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PeoplePartnerUsersTable,
			Columns: user.PeoplePartnerUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserPeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PeoplePartnerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PeoplePartnerUsersTable,
			Columns: user.PeoplePartnerUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserPeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PeoplePartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PeoplePartnerTable,
			Columns: user.PeoplePartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.PeoplePartner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPeoplePartnerIDs(); len(nodes) > 0 && !_u.mutation.PeoplePartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PeoplePartnerTable,
			Columns: user.PeoplePartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.PeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PeoplePartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PeoplePartnerTable,
			Columns: user.PeoplePartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.PeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (_u *UserUpdateOne) AddTodoIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddTodoIDs(ids...)
	return _u
}

// AddTodos adds the "todos" edges to the Todo entity.
func (_u *UserUpdateOne) AddTodos(v ...*Todo) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTodoIDs(ids...)
}

// AddModeratorUserIDs adds the "moderator_users" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddModeratorUserIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddModeratorUserIDs(ids...)
	return _u
}

// AddModeratorUsers adds the "moderator_users" edges to the User entity.
func (_u *UserUpdateOne) AddModeratorUsers(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddModeratorUserIDs(ids...)
}

// AddModeratorIDs adds the "moderators" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddModeratorIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddModeratorIDs(ids...)
	return _u
}

// AddModerators adds the "moderators" edges to the User entity.
func (_u *UserUpdateOne) AddModerators(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddModeratorIDs(ids...)
}

// AddPeoplePartnerUserIDs adds the "people_partner_users" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddPeoplePartnerUserIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPeoplePartnerUserIDs(ids...)
	return _u
}

// AddPeoplePartnerUsers adds the "people_partner_users" edges to the User entity.
func (_u *UserUpdateOne) AddPeoplePartnerUsers(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPeoplePartnerUserIDs(ids...)
}

// AddPeoplePartnerIDs adds the "people_partner" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddPeoplePartnerIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPeoplePartnerIDs(ids...)
	return _u
}

// AddPeoplePartner adds the "people_partner" edges to the User entity.
func (_u *UserUpdateOne) AddPeoplePartner(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPeoplePartnerIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (_u *UserUpdateOne) ClearTodos() *UserUpdateOne {
	_u.mutation.ClearTodos()
	return _u
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (_u *UserUpdateOne) RemoveTodoIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveTodoIDs(ids...)
	return _u
}

// RemoveTodos removes "todos" edges to Todo entities.
func (_u *UserUpdateOne) RemoveTodos(v ...*Todo) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTodoIDs(ids...)
}

// ClearModeratorUsers clears all "moderator_users" edges to the User entity.
func (_u *UserUpdateOne) ClearModeratorUsers() *UserUpdateOne {
	_u.mutation.ClearModeratorUsers()
	return _u
}

// RemoveModeratorUserIDs removes the "moderator_users" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveModeratorUserIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveModeratorUserIDs(ids...)
	return _u
}

// RemoveModeratorUsers removes "moderator_users" edges to User entities.
func (_u *UserUpdateOne) RemoveModeratorUsers(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveModeratorUserIDs(ids...)
}

// ClearModerators clears all "moderators" edges to the User entity.
func (_u *UserUpdateOne) ClearModerators() *UserUpdateOne {
	_u.mutation.ClearModerators()
	return _u
}

// RemoveModeratorIDs removes the "moderators" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveModeratorIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveModeratorIDs(ids...)
	return _u
}

// RemoveModerators removes "moderators" edges to User entities.
func (_u *UserUpdateOne) RemoveModerators(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveModeratorIDs(ids...)
}

// ClearPeoplePartnerUsers clears all "people_partner_users" edges to the User entity.
func (_u *UserUpdateOne) ClearPeoplePartnerUsers() *UserUpdateOne {
	_u.mutation.ClearPeoplePartnerUsers()
	return _u
}

// RemovePeoplePartnerUserIDs removes the "people_partner_users" edge to User entities by IDs.
func (_u *UserUpdateOne) RemovePeoplePartnerUserIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePeoplePartnerUserIDs(ids...)
	return _u
}

// RemovePeoplePartnerUsers removes "people_partner_users" edges to User entities.
func (_u *UserUpdateOne) RemovePeoplePartnerUsers(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePeoplePartnerUserIDs(ids...)
}

// ClearPeoplePartner clears all "people_partner" edges to the User entity.
func (_u *UserUpdateOne) ClearPeoplePartner() *UserUpdateOne {
	_u.mutation.ClearPeoplePartner()
	return _u
}

// RemovePeoplePartnerIDs removes the "people_partner" edge to User entities by IDs.
func (_u *UserUpdateOne) RemovePeoplePartnerIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePeoplePartnerIDs(ids...)
	return _u
}

// RemovePeoplePartner removes "people_partner" edges to User entities.
func (_u *UserUpdateOne) RemovePeoplePartner(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePeoplePartnerIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if _u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Todo
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTodosIDs(); len(nodes) > 0 && !_u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Todo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Todo
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModeratorUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserModerators
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedModeratorUsersIDs(); len(nodes) > 0 && !_u.mutation.ModeratorUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserModerators
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModeratorUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserModerators
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ModeratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Moderator
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedModeratorsIDs(); len(nodes) > 0 && !_u.mutation.ModeratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Moderator
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ModeratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.Moderator
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PeoplePartnerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PeoplePartnerUsersTable,
			Columns: user.PeoplePartnerUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserPeoplePartner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPeoplePartnerUsersIDs(); len(nodes) > 0 && !_u.mutation.PeoplePartnerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PeoplePartnerUsersTable,
			Columns: user.PeoplePartnerUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserPeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PeoplePartnerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PeoplePartnerUsersTable,
			Columns: user.PeoplePartnerUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.UserPeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PeoplePartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PeoplePartnerTable,
			Columns: user.PeoplePartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.PeoplePartner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPeoplePartnerIDs(); len(nodes) > 0 && !_u.mutation.PeoplePartnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PeoplePartnerTable,
			Columns: user.PeoplePartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.PeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PeoplePartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PeoplePartnerTable,
			Columns: user.PeoplePartnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.PeoplePartner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
