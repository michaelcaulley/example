// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/predicate"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reminder.Table,
			Columns: reminder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reminder.FieldID,
			},
		},
		Type: "Reminder",
		Fields: map[string]*sqlgraph.FieldSpec{
			reminder.FieldCreatedAt: {Type: field.TypeTime, Column: reminder.FieldCreatedAt},
			reminder.FieldUpdatedAt: {Type: field.TypeTime, Column: reminder.FieldUpdatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todo.FieldID,
			},
		},
		Type: "Todo",
		Fields: map[string]*sqlgraph.FieldSpec{
			todo.FieldText:    {Type: field.TypeString, Column: todo.FieldText},
			todo.FieldDoneAt:  {Type: field.TypeTime, Column: todo.FieldDoneAt},
			todo.FieldOwnerID: {Type: field.TypeInt, Column: todo.FieldOwnerID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldName: {Type: field.TypeString, Column: user.FieldName},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.OwnerTable,
			Columns: []string{todo.OwnerColumn},
			Bidi:    false,
		},
		"Todo",
		"User",
	)
	graph.MustAddE(
		"todos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
		},
		"User",
		"Todo",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *ReminderQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReminderQuery builder.
func (_q *ReminderQuery) Filter() *ReminderFilter {
	return &ReminderFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ReminderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReminderMutation builder.
func (m *ReminderMutation) Filter() *ReminderFilter {
	return &ReminderFilter{config: m.config, predicateAdder: m}
}

// ReminderFilter provides a generic filtering capability at runtime for ReminderQuery.
type ReminderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReminderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ReminderFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(reminder.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReminderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reminder.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ReminderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(reminder.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (_q *TodoQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoQuery builder.
func (_q *TodoQuery) Filter() *TodoFilter {
	return &TodoFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoMutation builder.
func (m *TodoMutation) Filter() *TodoFilter {
	return &TodoFilter{config: m.config, predicateAdder: m}
}

// TodoFilter provides a generic filtering capability at runtime for TodoQuery.
type TodoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TodoFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(todo.FieldID))
}

// WhereText applies the entql string predicate on the text field.
func (f *TodoFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(todo.FieldText))
}

// WhereDoneAt applies the entql time.Time predicate on the done_at field.
func (f *TodoFilter) WhereDoneAt(p entql.TimeP) {
	f.Where(p.Field(todo.FieldDoneAt))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *TodoFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(todo.FieldOwnerID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TodoFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TodoFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereHasTodos applies a predicate to check if query has an edge todos.
func (f *UserFilter) WhereHasTodos() {
	f.Where(entql.HasEdge("todos"))
}

// WhereHasTodosWith applies a predicate to check if query has an edge todos with a given conditions (other predicates).
func (f *UserFilter) WhereHasTodosWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
