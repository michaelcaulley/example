// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/moderator"
	"example/internal/ent/predicate"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todoreminder"
	"example/internal/ent/todototodogroupassociation"
	"example/internal/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 7)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   moderator.Table,
			Columns: moderator.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: moderator.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: moderator.FieldModeratorUserID,
				},
			},
		},
		Type: "Moderator",
		Fields: map[string]*sqlgraph.FieldSpec{
			moderator.FieldUserID:          {Type: field.TypeInt, Column: moderator.FieldUserID},
			moderator.FieldModeratorUserID: {Type: field.TypeInt, Column: moderator.FieldModeratorUserID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reminder.Table,
			Columns: reminder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reminder.FieldID,
			},
		},
		Type: "Reminder",
		Fields: map[string]*sqlgraph.FieldSpec{
			reminder.FieldCreatedAt: {Type: field.TypeTime, Column: reminder.FieldCreatedAt},
			reminder.FieldUpdatedAt: {Type: field.TypeTime, Column: reminder.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todo.Table,
			Columns: todo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todo.FieldID,
			},
		},
		Type: "Todo",
		Fields: map[string]*sqlgraph.FieldSpec{
			todo.FieldText:    {Type: field.TypeString, Column: todo.FieldText},
			todo.FieldDoneAt:  {Type: field.TypeTime, Column: todo.FieldDoneAt},
			todo.FieldOwnerID: {Type: field.TypeInt, Column: todo.FieldOwnerID},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todogroup.Table,
			Columns: todogroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todogroup.FieldID,
			},
		},
		Type: "TodoGroup",
		Fields: map[string]*sqlgraph.FieldSpec{
			todogroup.FieldCreatedAt: {Type: field.TypeTime, Column: todogroup.FieldCreatedAt},
			todogroup.FieldUpdatedAt: {Type: field.TypeTime, Column: todogroup.FieldUpdatedAt},
			todogroup.FieldName:      {Type: field.TypeString, Column: todogroup.FieldName},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todoreminder.Table,
			Columns: todoreminder.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: todoreminder.FieldTodoID,
				},
				{
					Type:   field.TypeInt,
					Column: todoreminder.FieldReminderID,
				},
			},
		},
		Type: "TodoReminder",
		Fields: map[string]*sqlgraph.FieldSpec{
			todoreminder.FieldTodoID:     {Type: field.TypeInt, Column: todoreminder.FieldTodoID},
			todoreminder.FieldReminderID: {Type: field.TypeInt, Column: todoreminder.FieldReminderID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todototodogroupassociation.Table,
			Columns: todototodogroupassociation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todototodogroupassociation.FieldID,
			},
		},
		Type: "TodoToTodoGroupAssociation",
		Fields: map[string]*sqlgraph.FieldSpec{
			todototodogroupassociation.FieldCreatedAt:                           {Type: field.TypeTime, Column: todototodogroupassociation.FieldCreatedAt},
			todototodogroupassociation.FieldUpdatedAt:                           {Type: field.TypeTime, Column: todototodogroupassociation.FieldUpdatedAt},
			todototodogroupassociation.FieldTodoID:                              {Type: field.TypeInt, Column: todototodogroupassociation.FieldTodoID},
			todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier: {Type: field.TypeInt, Column: todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier},
			todototodogroupassociation.FieldAssigneeID:                          {Type: field.TypeInt, Column: todototodogroupassociation.FieldAssigneeID},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldName: {Type: field.TypeString, Column: user.FieldName},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.UserTable,
			Columns: []string{moderator.UserColumn},
			Bidi:    false,
		},
		"Moderator",
		"User",
	)
	graph.MustAddE(
		"moderator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.ModeratorTable,
			Columns: []string{moderator.ModeratorColumn},
			Bidi:    false,
		},
		"Moderator",
		"User",
	)
	graph.MustAddE(
		"todo",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reminder.TodoTable,
			Columns: reminder.TodoPrimaryKey,
			Bidi:    false,
		},
		"Reminder",
		"Todo",
	)
	graph.MustAddE(
		"todo_reminders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   reminder.TodoRemindersTable,
			Columns: []string{reminder.TodoRemindersColumn},
			Bidi:    false,
		},
		"Reminder",
		"TodoReminder",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todo.OwnerTable,
			Columns: []string{todo.OwnerColumn},
			Bidi:    false,
		},
		"Todo",
		"User",
	)
	graph.MustAddE(
		"reminders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todo.RemindersTable,
			Columns: todo.RemindersPrimaryKey,
			Bidi:    false,
		},
		"Todo",
		"Reminder",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   todo.GroupsTable,
			Columns: todo.GroupsPrimaryKey,
			Bidi:    false,
		},
		"Todo",
		"TodoGroup",
	)
	graph.MustAddE(
		"todo_reminders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todo.TodoRemindersTable,
			Columns: []string{todo.TodoRemindersColumn},
			Bidi:    false,
		},
		"Todo",
		"TodoReminder",
	)
	graph.MustAddE(
		"grouped_todos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todo.GroupedTodosTable,
			Columns: []string{todo.GroupedTodosColumn},
			Bidi:    false,
		},
		"Todo",
		"TodoToTodoGroupAssociation",
	)
	graph.MustAddE(
		"todos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
		},
		"TodoGroup",
		"Todo",
	)
	graph.MustAddE(
		"grouped_todos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
		},
		"TodoGroup",
		"TodoToTodoGroupAssociation",
	)
	graph.MustAddE(
		"todo",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.TodoTable,
			Columns: []string{todoreminder.TodoColumn},
			Bidi:    false,
		},
		"TodoReminder",
		"Todo",
	)
	graph.MustAddE(
		"reminder",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.ReminderTable,
			Columns: []string{todoreminder.ReminderColumn},
			Bidi:    false,
		},
		"TodoReminder",
		"Reminder",
	)
	graph.MustAddE(
		"todo",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todototodogroupassociation.TodoTable,
			Columns: []string{todototodogroupassociation.TodoColumn},
			Bidi:    false,
		},
		"TodoToTodoGroupAssociation",
		"Todo",
	)
	graph.MustAddE(
		"todo_group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todototodogroupassociation.TodoGroupTable,
			Columns: []string{todototodogroupassociation.TodoGroupColumn},
			Bidi:    false,
		},
		"TodoToTodoGroupAssociation",
		"TodoGroup",
	)
	graph.MustAddE(
		"todos",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TodosTable,
			Columns: []string{user.TodosColumn},
			Bidi:    false,
		},
		"User",
		"Todo",
	)
	graph.MustAddE(
		"moderator_users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratorUsersTable,
			Columns: user.ModeratorUsersPrimaryKey,
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"moderators",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratorsTable,
			Columns: user.ModeratorsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"User",
	)
	graph.MustAddE(
		"moderator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModeratorTable,
			Columns: []string{user.ModeratorColumn},
			Bidi:    false,
		},
		"User",
		"Moderator",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *ModeratorQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ModeratorQuery builder.
func (_q *ModeratorQuery) Filter() *ModeratorFilter {
	return &ModeratorFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ModeratorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ModeratorMutation builder.
func (m *ModeratorMutation) Filter() *ModeratorFilter {
	return &ModeratorFilter{config: m.config, predicateAdder: m}
}

// ModeratorFilter provides a generic filtering capability at runtime for ModeratorQuery.
type ModeratorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ModeratorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *ModeratorFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(moderator.FieldUserID))
}

// WhereModeratorUserID applies the entql int predicate on the moderator_user_id field.
func (f *ModeratorFilter) WhereModeratorUserID(p entql.IntP) {
	f.Where(p.Field(moderator.FieldModeratorUserID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ModeratorFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ModeratorFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModerator applies a predicate to check if query has an edge moderator.
func (f *ModeratorFilter) WhereHasModerator() {
	f.Where(entql.HasEdge("moderator"))
}

// WhereHasModeratorWith applies a predicate to check if query has an edge moderator with a given conditions (other predicates).
func (f *ModeratorFilter) WhereHasModeratorWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("moderator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *ReminderQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReminderQuery builder.
func (_q *ReminderQuery) Filter() *ReminderFilter {
	return &ReminderFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *ReminderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReminderMutation builder.
func (m *ReminderMutation) Filter() *ReminderFilter {
	return &ReminderFilter{config: m.config, predicateAdder: m}
}

// ReminderFilter provides a generic filtering capability at runtime for ReminderQuery.
type ReminderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReminderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ReminderFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(reminder.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReminderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reminder.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ReminderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(reminder.FieldUpdatedAt))
}

// WhereHasTodo applies a predicate to check if query has an edge todo.
func (f *ReminderFilter) WhereHasTodo() {
	f.Where(entql.HasEdge("todo"))
}

// WhereHasTodoWith applies a predicate to check if query has an edge todo with a given conditions (other predicates).
func (f *ReminderFilter) WhereHasTodoWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todo", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTodoReminders applies a predicate to check if query has an edge todo_reminders.
func (f *ReminderFilter) WhereHasTodoReminders() {
	f.Where(entql.HasEdge("todo_reminders"))
}

// WhereHasTodoRemindersWith applies a predicate to check if query has an edge todo_reminders with a given conditions (other predicates).
func (f *ReminderFilter) WhereHasTodoRemindersWith(preds ...predicate.TodoReminder) {
	f.Where(entql.HasEdgeWith("todo_reminders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TodoQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoQuery builder.
func (_q *TodoQuery) Filter() *TodoFilter {
	return &TodoFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoMutation builder.
func (m *TodoMutation) Filter() *TodoFilter {
	return &TodoFilter{config: m.config, predicateAdder: m}
}

// TodoFilter provides a generic filtering capability at runtime for TodoQuery.
type TodoFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TodoFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(todo.FieldID))
}

// WhereText applies the entql string predicate on the text field.
func (f *TodoFilter) WhereText(p entql.StringP) {
	f.Where(p.Field(todo.FieldText))
}

// WhereDoneAt applies the entql time.Time predicate on the done_at field.
func (f *TodoFilter) WhereDoneAt(p entql.TimeP) {
	f.Where(p.Field(todo.FieldDoneAt))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *TodoFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(todo.FieldOwnerID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *TodoFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *TodoFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReminders applies a predicate to check if query has an edge reminders.
func (f *TodoFilter) WhereHasReminders() {
	f.Where(entql.HasEdge("reminders"))
}

// WhereHasRemindersWith applies a predicate to check if query has an edge reminders with a given conditions (other predicates).
func (f *TodoFilter) WhereHasRemindersWith(preds ...predicate.Reminder) {
	f.Where(entql.HasEdgeWith("reminders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *TodoFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *TodoFilter) WhereHasGroupsWith(preds ...predicate.TodoGroup) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTodoReminders applies a predicate to check if query has an edge todo_reminders.
func (f *TodoFilter) WhereHasTodoReminders() {
	f.Where(entql.HasEdge("todo_reminders"))
}

// WhereHasTodoRemindersWith applies a predicate to check if query has an edge todo_reminders with a given conditions (other predicates).
func (f *TodoFilter) WhereHasTodoRemindersWith(preds ...predicate.TodoReminder) {
	f.Where(entql.HasEdgeWith("todo_reminders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupedTodos applies a predicate to check if query has an edge grouped_todos.
func (f *TodoFilter) WhereHasGroupedTodos() {
	f.Where(entql.HasEdge("grouped_todos"))
}

// WhereHasGroupedTodosWith applies a predicate to check if query has an edge grouped_todos with a given conditions (other predicates).
func (f *TodoFilter) WhereHasGroupedTodosWith(preds ...predicate.TodoToTodoGroupAssociation) {
	f.Where(entql.HasEdgeWith("grouped_todos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TodoGroupQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoGroupQuery builder.
func (_q *TodoGroupQuery) Filter() *TodoGroupFilter {
	return &TodoGroupFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoGroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoGroupMutation builder.
func (m *TodoGroupMutation) Filter() *TodoGroupFilter {
	return &TodoGroupFilter{config: m.config, predicateAdder: m}
}

// TodoGroupFilter provides a generic filtering capability at runtime for TodoGroupQuery.
type TodoGroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoGroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TodoGroupFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(todogroup.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TodoGroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(todogroup.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TodoGroupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(todogroup.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *TodoGroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(todogroup.FieldName))
}

// WhereHasTodos applies a predicate to check if query has an edge todos.
func (f *TodoGroupFilter) WhereHasTodos() {
	f.Where(entql.HasEdge("todos"))
}

// WhereHasTodosWith applies a predicate to check if query has an edge todos with a given conditions (other predicates).
func (f *TodoGroupFilter) WhereHasTodosWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupedTodos applies a predicate to check if query has an edge grouped_todos.
func (f *TodoGroupFilter) WhereHasGroupedTodos() {
	f.Where(entql.HasEdge("grouped_todos"))
}

// WhereHasGroupedTodosWith applies a predicate to check if query has an edge grouped_todos with a given conditions (other predicates).
func (f *TodoGroupFilter) WhereHasGroupedTodosWith(preds ...predicate.TodoToTodoGroupAssociation) {
	f.Where(entql.HasEdgeWith("grouped_todos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TodoReminderQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoReminderQuery builder.
func (_q *TodoReminderQuery) Filter() *TodoReminderFilter {
	return &TodoReminderFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoReminderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoReminderMutation builder.
func (m *TodoReminderMutation) Filter() *TodoReminderFilter {
	return &TodoReminderFilter{config: m.config, predicateAdder: m}
}

// TodoReminderFilter provides a generic filtering capability at runtime for TodoReminderQuery.
type TodoReminderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoReminderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereTodoID applies the entql int predicate on the todo_id field.
func (f *TodoReminderFilter) WhereTodoID(p entql.IntP) {
	f.Where(p.Field(todoreminder.FieldTodoID))
}

// WhereReminderID applies the entql int predicate on the reminder_id field.
func (f *TodoReminderFilter) WhereReminderID(p entql.IntP) {
	f.Where(p.Field(todoreminder.FieldReminderID))
}

// WhereHasTodo applies a predicate to check if query has an edge todo.
func (f *TodoReminderFilter) WhereHasTodo() {
	f.Where(entql.HasEdge("todo"))
}

// WhereHasTodoWith applies a predicate to check if query has an edge todo with a given conditions (other predicates).
func (f *TodoReminderFilter) WhereHasTodoWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todo", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReminder applies a predicate to check if query has an edge reminder.
func (f *TodoReminderFilter) WhereHasReminder() {
	f.Where(entql.HasEdge("reminder"))
}

// WhereHasReminderWith applies a predicate to check if query has an edge reminder with a given conditions (other predicates).
func (f *TodoReminderFilter) WhereHasReminderWith(preds ...predicate.Reminder) {
	f.Where(entql.HasEdgeWith("reminder", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *TodoToTodoGroupAssociationQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoToTodoGroupAssociationQuery builder.
func (_q *TodoToTodoGroupAssociationQuery) Filter() *TodoToTodoGroupAssociationFilter {
	return &TodoToTodoGroupAssociationFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoToTodoGroupAssociationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoToTodoGroupAssociationMutation builder.
func (m *TodoToTodoGroupAssociationMutation) Filter() *TodoToTodoGroupAssociationFilter {
	return &TodoToTodoGroupAssociationFilter{config: m.config, predicateAdder: m}
}

// TodoToTodoGroupAssociationFilter provides a generic filtering capability at runtime for TodoToTodoGroupAssociationQuery.
type TodoToTodoGroupAssociationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoToTodoGroupAssociationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *TodoToTodoGroupAssociationFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(todototodogroupassociation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TodoToTodoGroupAssociationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(todototodogroupassociation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TodoToTodoGroupAssociationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(todototodogroupassociation.FieldUpdatedAt))
}

// WhereTodoID applies the entql int predicate on the todo_id field.
func (f *TodoToTodoGroupAssociationFilter) WhereTodoID(p entql.IntP) {
	f.Where(p.Field(todototodogroupassociation.FieldTodoID))
}

// WhereTodoGroupReallyReallyLongIdentifier applies the entql int predicate on the todo_group_really_really_long_identifier field.
func (f *TodoToTodoGroupAssociationFilter) WhereTodoGroupReallyReallyLongIdentifier(p entql.IntP) {
	f.Where(p.Field(todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier))
}

// WhereAssigneeID applies the entql int predicate on the assignee_id field.
func (f *TodoToTodoGroupAssociationFilter) WhereAssigneeID(p entql.IntP) {
	f.Where(p.Field(todototodogroupassociation.FieldAssigneeID))
}

// WhereHasTodo applies a predicate to check if query has an edge todo.
func (f *TodoToTodoGroupAssociationFilter) WhereHasTodo() {
	f.Where(entql.HasEdge("todo"))
}

// WhereHasTodoWith applies a predicate to check if query has an edge todo with a given conditions (other predicates).
func (f *TodoToTodoGroupAssociationFilter) WhereHasTodoWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todo", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTodoGroup applies a predicate to check if query has an edge todo_group.
func (f *TodoToTodoGroupAssociationFilter) WhereHasTodoGroup() {
	f.Where(entql.HasEdge("todo_group"))
}

// WhereHasTodoGroupWith applies a predicate to check if query has an edge todo_group with a given conditions (other predicates).
func (f *TodoToTodoGroupAssociationFilter) WhereHasTodoGroupWith(preds ...predicate.TodoGroup) {
	f.Where(entql.HasEdgeWith("todo_group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereHasTodos applies a predicate to check if query has an edge todos.
func (f *UserFilter) WhereHasTodos() {
	f.Where(entql.HasEdge("todos"))
}

// WhereHasTodosWith applies a predicate to check if query has an edge todos with a given conditions (other predicates).
func (f *UserFilter) WhereHasTodosWith(preds ...predicate.Todo) {
	f.Where(entql.HasEdgeWith("todos", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModeratorUsers applies a predicate to check if query has an edge moderator_users.
func (f *UserFilter) WhereHasModeratorUsers() {
	f.Where(entql.HasEdge("moderator_users"))
}

// WhereHasModeratorUsersWith applies a predicate to check if query has an edge moderator_users with a given conditions (other predicates).
func (f *UserFilter) WhereHasModeratorUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("moderator_users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModerators applies a predicate to check if query has an edge moderators.
func (f *UserFilter) WhereHasModerators() {
	f.Where(entql.HasEdge("moderators"))
}

// WhereHasModeratorsWith applies a predicate to check if query has an edge moderators with a given conditions (other predicates).
func (f *UserFilter) WhereHasModeratorsWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("moderators", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModerator applies a predicate to check if query has an edge moderator.
func (f *UserFilter) WhereHasModerator() {
	f.Where(entql.HasEdge("moderator"))
}

// WhereHasModeratorWith applies a predicate to check if query has an edge moderator with a given conditions (other predicates).
func (f *UserFilter) WhereHasModeratorWith(preds ...predicate.Moderator) {
	f.Where(entql.HasEdgeWith("moderator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
