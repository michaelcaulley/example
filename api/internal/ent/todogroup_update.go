// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/predicate"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"example/internal/ent/internal"
)

// TodoGroupUpdate is the builder for updating TodoGroup entities.
type TodoGroupUpdate struct {
	config
	hooks     []Hook
	mutation  *TodoGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TodoGroupUpdate builder.
func (_u *TodoGroupUpdate) Where(ps ...predicate.TodoGroup) *TodoGroupUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TodoGroupUpdate) SetUpdatedAt(v time.Time) *TodoGroupUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TodoGroupUpdate) SetNillableUpdatedAt(v *time.Time) *TodoGroupUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *TodoGroupUpdate) SetName(v string) *TodoGroupUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TodoGroupUpdate) SetNillableName(v *string) *TodoGroupUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (_u *TodoGroupUpdate) AddTodoIDs(ids ...int) *TodoGroupUpdate {
	_u.mutation.AddTodoIDs(ids...)
	return _u
}

// AddTodos adds the "todos" edges to the Todo entity.
func (_u *TodoGroupUpdate) AddTodos(v ...*Todo) *TodoGroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTodoIDs(ids...)
}

// AddGroupedTodoIDs adds the "grouped_todos" edge to the TodoToTodoGroupAssociation entity by IDs.
func (_u *TodoGroupUpdate) AddGroupedTodoIDs(ids ...int) *TodoGroupUpdate {
	_u.mutation.AddGroupedTodoIDs(ids...)
	return _u
}

// AddGroupedTodos adds the "grouped_todos" edges to the TodoToTodoGroupAssociation entity.
func (_u *TodoGroupUpdate) AddGroupedTodos(v ...*TodoToTodoGroupAssociation) *TodoGroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupedTodoIDs(ids...)
}

// Mutation returns the TodoGroupMutation object of the builder.
func (_u *TodoGroupUpdate) Mutation() *TodoGroupMutation {
	return _u.mutation
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (_u *TodoGroupUpdate) ClearTodos() *TodoGroupUpdate {
	_u.mutation.ClearTodos()
	return _u
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (_u *TodoGroupUpdate) RemoveTodoIDs(ids ...int) *TodoGroupUpdate {
	_u.mutation.RemoveTodoIDs(ids...)
	return _u
}

// RemoveTodos removes "todos" edges to Todo entities.
func (_u *TodoGroupUpdate) RemoveTodos(v ...*Todo) *TodoGroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTodoIDs(ids...)
}

// ClearGroupedTodos clears all "grouped_todos" edges to the TodoToTodoGroupAssociation entity.
func (_u *TodoGroupUpdate) ClearGroupedTodos() *TodoGroupUpdate {
	_u.mutation.ClearGroupedTodos()
	return _u
}

// RemoveGroupedTodoIDs removes the "grouped_todos" edge to TodoToTodoGroupAssociation entities by IDs.
func (_u *TodoGroupUpdate) RemoveGroupedTodoIDs(ids ...int) *TodoGroupUpdate {
	_u.mutation.RemoveGroupedTodoIDs(ids...)
	return _u
}

// RemoveGroupedTodos removes "grouped_todos" edges to TodoToTodoGroupAssociation entities.
func (_u *TodoGroupUpdate) RemoveGroupedTodos(v ...*TodoToTodoGroupAssociation) *TodoGroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupedTodoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TodoGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TodoGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TodoGroupUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TodoGroupUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TodoGroupUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := todogroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TodoGroup.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TodoGroupUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TodoGroupUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TodoGroupUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(todogroup.Table, todogroup.Columns, sqlgraph.NewFieldSpec(todogroup.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(todogroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(todogroup.FieldName, field.TypeString, value)
	}
	if _u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTodosIDs(); len(nodes) > 0 && !_u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupedTodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupedTodosIDs(); len(nodes) > 0 && !_u.mutation.GroupedTodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupedTodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TodoGroup
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todogroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TodoGroupUpdateOne is the builder for updating a single TodoGroup entity.
type TodoGroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TodoGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TodoGroupUpdateOne) SetUpdatedAt(v time.Time) *TodoGroupUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TodoGroupUpdateOne) SetNillableUpdatedAt(v *time.Time) *TodoGroupUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *TodoGroupUpdateOne) SetName(v string) *TodoGroupUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TodoGroupUpdateOne) SetNillableName(v *string) *TodoGroupUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (_u *TodoGroupUpdateOne) AddTodoIDs(ids ...int) *TodoGroupUpdateOne {
	_u.mutation.AddTodoIDs(ids...)
	return _u
}

// AddTodos adds the "todos" edges to the Todo entity.
func (_u *TodoGroupUpdateOne) AddTodos(v ...*Todo) *TodoGroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTodoIDs(ids...)
}

// AddGroupedTodoIDs adds the "grouped_todos" edge to the TodoToTodoGroupAssociation entity by IDs.
func (_u *TodoGroupUpdateOne) AddGroupedTodoIDs(ids ...int) *TodoGroupUpdateOne {
	_u.mutation.AddGroupedTodoIDs(ids...)
	return _u
}

// AddGroupedTodos adds the "grouped_todos" edges to the TodoToTodoGroupAssociation entity.
func (_u *TodoGroupUpdateOne) AddGroupedTodos(v ...*TodoToTodoGroupAssociation) *TodoGroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupedTodoIDs(ids...)
}

// Mutation returns the TodoGroupMutation object of the builder.
func (_u *TodoGroupUpdateOne) Mutation() *TodoGroupMutation {
	return _u.mutation
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (_u *TodoGroupUpdateOne) ClearTodos() *TodoGroupUpdateOne {
	_u.mutation.ClearTodos()
	return _u
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (_u *TodoGroupUpdateOne) RemoveTodoIDs(ids ...int) *TodoGroupUpdateOne {
	_u.mutation.RemoveTodoIDs(ids...)
	return _u
}

// RemoveTodos removes "todos" edges to Todo entities.
func (_u *TodoGroupUpdateOne) RemoveTodos(v ...*Todo) *TodoGroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTodoIDs(ids...)
}

// ClearGroupedTodos clears all "grouped_todos" edges to the TodoToTodoGroupAssociation entity.
func (_u *TodoGroupUpdateOne) ClearGroupedTodos() *TodoGroupUpdateOne {
	_u.mutation.ClearGroupedTodos()
	return _u
}

// RemoveGroupedTodoIDs removes the "grouped_todos" edge to TodoToTodoGroupAssociation entities by IDs.
func (_u *TodoGroupUpdateOne) RemoveGroupedTodoIDs(ids ...int) *TodoGroupUpdateOne {
	_u.mutation.RemoveGroupedTodoIDs(ids...)
	return _u
}

// RemoveGroupedTodos removes "grouped_todos" edges to TodoToTodoGroupAssociation entities.
func (_u *TodoGroupUpdateOne) RemoveGroupedTodos(v ...*TodoToTodoGroupAssociation) *TodoGroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupedTodoIDs(ids...)
}

// Where appends a list predicates to the TodoGroupUpdate builder.
func (_u *TodoGroupUpdateOne) Where(ps ...predicate.TodoGroup) *TodoGroupUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TodoGroupUpdateOne) Select(field string, fields ...string) *TodoGroupUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TodoGroup entity.
func (_u *TodoGroupUpdateOne) Save(ctx context.Context) (*TodoGroup, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TodoGroupUpdateOne) SaveX(ctx context.Context) *TodoGroup {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TodoGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TodoGroupUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TodoGroupUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := todogroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TodoGroup.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TodoGroupUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TodoGroupUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TodoGroupUpdateOne) sqlSave(ctx context.Context) (_node *TodoGroup, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(todogroup.Table, todogroup.Columns, sqlgraph.NewFieldSpec(todogroup.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TodoGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todogroup.FieldID)
		for _, f := range fields {
			if !todogroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todogroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(todogroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(todogroup.FieldName, field.TypeString, value)
	}
	if _u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTodosIDs(); len(nodes) > 0 && !_u.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupedTodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupedTodosIDs(); len(nodes) > 0 && !_u.mutation.GroupedTodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupedTodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TodoGroup
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TodoGroup{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todogroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
