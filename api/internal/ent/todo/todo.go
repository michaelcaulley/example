// Code generated by ent, DO NOT EDIT.

package todo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the todo type in the database.
	Label = "todo"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldDoneAt holds the string denoting the done_at field in the database.
	FieldDoneAt = "done_at"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeReminders holds the string denoting the reminders edge name in mutations.
	EdgeReminders = "reminders"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeTodoReminders holds the string denoting the todo_reminders edge name in mutations.
	EdgeTodoReminders = "todo_reminders"
	// EdgeGroupedTodos holds the string denoting the grouped_todos edge name in mutations.
	EdgeGroupedTodos = "grouped_todos"
	// Table holds the table name of the todo in the database.
	Table = "todos"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "todos"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// RemindersTable is the table that holds the reminders relation/edge. The primary key declared below.
	RemindersTable = "todo_reminders"
	// RemindersInverseTable is the table name for the Reminder entity.
	// It exists in this package in order to avoid circular dependency with the "reminder" package.
	RemindersInverseTable = "reminders"
	// GroupsTable is the table that holds the groups relation/edge. The primary key declared below.
	GroupsTable = "todo_to_todo_group_associations"
	// GroupsInverseTable is the table name for the TodoGroup entity.
	// It exists in this package in order to avoid circular dependency with the "todogroup" package.
	GroupsInverseTable = "todo_groups"
	// TodoRemindersTable is the table that holds the todo_reminders relation/edge.
	TodoRemindersTable = "todo_reminders"
	// TodoRemindersInverseTable is the table name for the TodoReminder entity.
	// It exists in this package in order to avoid circular dependency with the "todoreminder" package.
	TodoRemindersInverseTable = "todo_reminders"
	// TodoRemindersColumn is the table column denoting the todo_reminders relation/edge.
	TodoRemindersColumn = "todo_id"
	// GroupedTodosTable is the table that holds the grouped_todos relation/edge.
	GroupedTodosTable = "todo_to_todo_group_associations"
	// GroupedTodosInverseTable is the table name for the TodoToTodoGroupAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "todototodogroupassociation" package.
	GroupedTodosInverseTable = "todo_to_todo_group_associations"
	// GroupedTodosColumn is the table column denoting the grouped_todos relation/edge.
	GroupedTodosColumn = "todo_id"
)

// Columns holds all SQL columns for todo fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldDoneAt,
	FieldOwnerID,
}

var (
	// RemindersPrimaryKey and RemindersColumn2 are the table columns denoting the
	// primary key for the reminders relation (M2M).
	RemindersPrimaryKey = []string{"todo_id", "reminder_id"}
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"todo_group_really_really_long_identifier", "todo_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
)

// OrderOption defines the ordering options for the Todo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByDoneAt orders the results by the done_at field.
func ByDoneAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoneAt, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByRemindersCount orders the results by reminders count.
func ByRemindersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRemindersStep(), opts...)
	}
}

// ByReminders orders the results by reminders terms.
func ByReminders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRemindersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTodoRemindersCount orders the results by todo_reminders count.
func ByTodoRemindersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTodoRemindersStep(), opts...)
	}
}

// ByTodoReminders orders the results by todo_reminders terms.
func ByTodoReminders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTodoRemindersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupedTodosCount orders the results by grouped_todos count.
func ByGroupedTodosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupedTodosStep(), opts...)
	}
}

// ByGroupedTodos orders the results by grouped_todos terms.
func ByGroupedTodos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupedTodosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newRemindersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RemindersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RemindersTable, RemindersPrimaryKey...),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupsTable, GroupsPrimaryKey...),
	)
}
func newTodoRemindersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TodoRemindersInverseTable, TodoRemindersColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, TodoRemindersTable, TodoRemindersColumn),
	)
}
func newGroupedTodosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupedTodosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GroupedTodosTable, GroupedTodosColumn),
	)
}
