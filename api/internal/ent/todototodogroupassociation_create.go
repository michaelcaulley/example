// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoToTodoGroupAssociationCreate is the builder for creating a TodoToTodoGroupAssociation entity.
type TodoToTodoGroupAssociationCreate struct {
	config
	mutation *TodoToTodoGroupAssociationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *TodoToTodoGroupAssociationCreate) SetCreatedAt(v time.Time) *TodoToTodoGroupAssociationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TodoToTodoGroupAssociationCreate) SetUpdatedAt(v time.Time) *TodoToTodoGroupAssociationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetTodoID sets the "todo_id" field.
func (_c *TodoToTodoGroupAssociationCreate) SetTodoID(v int) *TodoToTodoGroupAssociationCreate {
	_c.mutation.SetTodoID(v)
	return _c
}

// SetTodoGroupReallyReallyLongIdentifier sets the "todo_group_really_really_long_identifier" field.
func (_c *TodoToTodoGroupAssociationCreate) SetTodoGroupReallyReallyLongIdentifier(v int) *TodoToTodoGroupAssociationCreate {
	_c.mutation.SetTodoGroupReallyReallyLongIdentifier(v)
	return _c
}

// SetAssigneeID sets the "assignee_id" field.
func (_c *TodoToTodoGroupAssociationCreate) SetAssigneeID(v int) *TodoToTodoGroupAssociationCreate {
	_c.mutation.SetAssigneeID(v)
	return _c
}

// SetTodo sets the "todo" edge to the Todo entity.
func (_c *TodoToTodoGroupAssociationCreate) SetTodo(v *Todo) *TodoToTodoGroupAssociationCreate {
	return _c.SetTodoID(v.ID)
}

// SetTodoGroupID sets the "todo_group" edge to the TodoGroup entity by ID.
func (_c *TodoToTodoGroupAssociationCreate) SetTodoGroupID(id int) *TodoToTodoGroupAssociationCreate {
	_c.mutation.SetTodoGroupID(id)
	return _c
}

// SetTodoGroup sets the "todo_group" edge to the TodoGroup entity.
func (_c *TodoToTodoGroupAssociationCreate) SetTodoGroup(v *TodoGroup) *TodoToTodoGroupAssociationCreate {
	return _c.SetTodoGroupID(v.ID)
}

// Mutation returns the TodoToTodoGroupAssociationMutation object of the builder.
func (_c *TodoToTodoGroupAssociationCreate) Mutation() *TodoToTodoGroupAssociationMutation {
	return _c.mutation
}

// Save creates the TodoToTodoGroupAssociation in the database.
func (_c *TodoToTodoGroupAssociationCreate) Save(ctx context.Context) (*TodoToTodoGroupAssociation, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TodoToTodoGroupAssociationCreate) SaveX(ctx context.Context) *TodoToTodoGroupAssociation {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TodoToTodoGroupAssociationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TodoToTodoGroupAssociationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TodoToTodoGroupAssociationCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TodoToTodoGroupAssociation.created_at"`)}
	}
	if _, ok := _c.mutation.TodoID(); !ok {
		return &ValidationError{Name: "todo_id", err: errors.New(`ent: missing required field "TodoToTodoGroupAssociation.todo_id"`)}
	}
	if _, ok := _c.mutation.TodoGroupReallyReallyLongIdentifier(); !ok {
		return &ValidationError{Name: "todo_group_really_really_long_identifier", err: errors.New(`ent: missing required field "TodoToTodoGroupAssociation.todo_group_really_really_long_identifier"`)}
	}
	if _, ok := _c.mutation.AssigneeID(); !ok {
		return &ValidationError{Name: "assignee_id", err: errors.New(`ent: missing required field "TodoToTodoGroupAssociation.assignee_id"`)}
	}
	if len(_c.mutation.TodoIDs()) == 0 {
		return &ValidationError{Name: "todo", err: errors.New(`ent: missing required edge "TodoToTodoGroupAssociation.todo"`)}
	}
	if len(_c.mutation.TodoGroupIDs()) == 0 {
		return &ValidationError{Name: "todo_group", err: errors.New(`ent: missing required edge "TodoToTodoGroupAssociation.todo_group"`)}
	}
	return nil
}

func (_c *TodoToTodoGroupAssociationCreate) sqlSave(ctx context.Context) (*TodoToTodoGroupAssociation, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TodoToTodoGroupAssociationCreate) createSpec() (*TodoToTodoGroupAssociation, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoToTodoGroupAssociation{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(todototodogroupassociation.Table, sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt))
	)
	_spec.Schema = _c.schemaConfig.TodoToTodoGroupAssociation
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(todototodogroupassociation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(todototodogroupassociation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.AssigneeID(); ok {
		_spec.SetField(todototodogroupassociation.FieldAssigneeID, field.TypeInt, value)
		_node.AssigneeID = value
	}
	if nodes := _c.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todototodogroupassociation.TodoTable,
			Columns: []string{todototodogroupassociation.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TodoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TodoGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todototodogroupassociation.TodoGroupTable,
			Columns: []string{todototodogroupassociation.TodoGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todogroup.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TodoGroupReallyReallyLongIdentifier = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoToTodoGroupAssociation.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoToTodoGroupAssociationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *TodoToTodoGroupAssociationCreate) OnConflict(opts ...sql.ConflictOption) *TodoToTodoGroupAssociationUpsertOne {
	_c.conflict = opts
	return &TodoToTodoGroupAssociationUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoToTodoGroupAssociation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TodoToTodoGroupAssociationCreate) OnConflictColumns(columns ...string) *TodoToTodoGroupAssociationUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TodoToTodoGroupAssociationUpsertOne{
		create: _c,
	}
}

type (
	// TodoToTodoGroupAssociationUpsertOne is the builder for "upsert"-ing
	//  one TodoToTodoGroupAssociation node.
	TodoToTodoGroupAssociationUpsertOne struct {
		create *TodoToTodoGroupAssociationCreate
	}

	// TodoToTodoGroupAssociationUpsert is the "OnConflict" setter.
	TodoToTodoGroupAssociationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoToTodoGroupAssociationUpsert) SetUpdatedAt(v time.Time) *TodoToTodoGroupAssociationUpsert {
	u.Set(todototodogroupassociation.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoToTodoGroupAssociationUpsert) UpdateUpdatedAt() *TodoToTodoGroupAssociationUpsert {
	u.SetExcluded(todototodogroupassociation.FieldUpdatedAt)
	return u
}

// SetAssigneeID sets the "assignee_id" field.
func (u *TodoToTodoGroupAssociationUpsert) SetAssigneeID(v int) *TodoToTodoGroupAssociationUpsert {
	u.Set(todototodogroupassociation.FieldAssigneeID, v)
	return u
}

// UpdateAssigneeID sets the "assignee_id" field to the value that was provided on create.
func (u *TodoToTodoGroupAssociationUpsert) UpdateAssigneeID() *TodoToTodoGroupAssociationUpsert {
	u.SetExcluded(todototodogroupassociation.FieldAssigneeID)
	return u
}

// AddAssigneeID adds v to the "assignee_id" field.
func (u *TodoToTodoGroupAssociationUpsert) AddAssigneeID(v int) *TodoToTodoGroupAssociationUpsert {
	u.Add(todototodogroupassociation.FieldAssigneeID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TodoToTodoGroupAssociation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TodoToTodoGroupAssociationUpsertOne) UpdateNewValues() *TodoToTodoGroupAssociationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(todototodogroupassociation.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TodoID(); exists {
			s.SetIgnore(todototodogroupassociation.FieldTodoID)
		}
		if _, exists := u.create.mutation.TodoGroupReallyReallyLongIdentifier(); exists {
			s.SetIgnore(todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoToTodoGroupAssociation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TodoToTodoGroupAssociationUpsertOne) Ignore() *TodoToTodoGroupAssociationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoToTodoGroupAssociationUpsertOne) DoNothing() *TodoToTodoGroupAssociationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoToTodoGroupAssociationCreate.OnConflict
// documentation for more info.
func (u *TodoToTodoGroupAssociationUpsertOne) Update(set func(*TodoToTodoGroupAssociationUpsert)) *TodoToTodoGroupAssociationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoToTodoGroupAssociationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoToTodoGroupAssociationUpsertOne) SetUpdatedAt(v time.Time) *TodoToTodoGroupAssociationUpsertOne {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoToTodoGroupAssociationUpsertOne) UpdateUpdatedAt() *TodoToTodoGroupAssociationUpsertOne {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAssigneeID sets the "assignee_id" field.
func (u *TodoToTodoGroupAssociationUpsertOne) SetAssigneeID(v int) *TodoToTodoGroupAssociationUpsertOne {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.SetAssigneeID(v)
	})
}

// AddAssigneeID adds v to the "assignee_id" field.
func (u *TodoToTodoGroupAssociationUpsertOne) AddAssigneeID(v int) *TodoToTodoGroupAssociationUpsertOne {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.AddAssigneeID(v)
	})
}

// UpdateAssigneeID sets the "assignee_id" field to the value that was provided on create.
func (u *TodoToTodoGroupAssociationUpsertOne) UpdateAssigneeID() *TodoToTodoGroupAssociationUpsertOne {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.UpdateAssigneeID()
	})
}

// Exec executes the query.
func (u *TodoToTodoGroupAssociationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TodoToTodoGroupAssociationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoToTodoGroupAssociationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TodoToTodoGroupAssociationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TodoToTodoGroupAssociationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TodoToTodoGroupAssociationCreateBulk is the builder for creating many TodoToTodoGroupAssociation entities in bulk.
type TodoToTodoGroupAssociationCreateBulk struct {
	config
	err      error
	builders []*TodoToTodoGroupAssociationCreate
	conflict []sql.ConflictOption
}

// Save creates the TodoToTodoGroupAssociation entities in the database.
func (_c *TodoToTodoGroupAssociationCreateBulk) Save(ctx context.Context) ([]*TodoToTodoGroupAssociation, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TodoToTodoGroupAssociation, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoToTodoGroupAssociationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TodoToTodoGroupAssociationCreateBulk) SaveX(ctx context.Context) []*TodoToTodoGroupAssociation {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TodoToTodoGroupAssociationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TodoToTodoGroupAssociationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoToTodoGroupAssociation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoToTodoGroupAssociationUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *TodoToTodoGroupAssociationCreateBulk) OnConflict(opts ...sql.ConflictOption) *TodoToTodoGroupAssociationUpsertBulk {
	_c.conflict = opts
	return &TodoToTodoGroupAssociationUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoToTodoGroupAssociation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TodoToTodoGroupAssociationCreateBulk) OnConflictColumns(columns ...string) *TodoToTodoGroupAssociationUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TodoToTodoGroupAssociationUpsertBulk{
		create: _c,
	}
}

// TodoToTodoGroupAssociationUpsertBulk is the builder for "upsert"-ing
// a bulk of TodoToTodoGroupAssociation nodes.
type TodoToTodoGroupAssociationUpsertBulk struct {
	create *TodoToTodoGroupAssociationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TodoToTodoGroupAssociation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TodoToTodoGroupAssociationUpsertBulk) UpdateNewValues() *TodoToTodoGroupAssociationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(todototodogroupassociation.FieldCreatedAt)
			}
			if _, exists := b.mutation.TodoID(); exists {
				s.SetIgnore(todototodogroupassociation.FieldTodoID)
			}
			if _, exists := b.mutation.TodoGroupReallyReallyLongIdentifier(); exists {
				s.SetIgnore(todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoToTodoGroupAssociation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TodoToTodoGroupAssociationUpsertBulk) Ignore() *TodoToTodoGroupAssociationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoToTodoGroupAssociationUpsertBulk) DoNothing() *TodoToTodoGroupAssociationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoToTodoGroupAssociationCreateBulk.OnConflict
// documentation for more info.
func (u *TodoToTodoGroupAssociationUpsertBulk) Update(set func(*TodoToTodoGroupAssociationUpsert)) *TodoToTodoGroupAssociationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoToTodoGroupAssociationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoToTodoGroupAssociationUpsertBulk) SetUpdatedAt(v time.Time) *TodoToTodoGroupAssociationUpsertBulk {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoToTodoGroupAssociationUpsertBulk) UpdateUpdatedAt() *TodoToTodoGroupAssociationUpsertBulk {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAssigneeID sets the "assignee_id" field.
func (u *TodoToTodoGroupAssociationUpsertBulk) SetAssigneeID(v int) *TodoToTodoGroupAssociationUpsertBulk {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.SetAssigneeID(v)
	})
}

// AddAssigneeID adds v to the "assignee_id" field.
func (u *TodoToTodoGroupAssociationUpsertBulk) AddAssigneeID(v int) *TodoToTodoGroupAssociationUpsertBulk {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.AddAssigneeID(v)
	})
}

// UpdateAssigneeID sets the "assignee_id" field to the value that was provided on create.
func (u *TodoToTodoGroupAssociationUpsertBulk) UpdateAssigneeID() *TodoToTodoGroupAssociationUpsertBulk {
	return u.Update(func(s *TodoToTodoGroupAssociationUpsert) {
		s.UpdateAssigneeID()
	})
}

// Exec executes the query.
func (u *TodoToTodoGroupAssociationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TodoToTodoGroupAssociationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TodoToTodoGroupAssociationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoToTodoGroupAssociationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
