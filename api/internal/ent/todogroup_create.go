// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoGroupCreate is the builder for creating a TodoGroup entity.
type TodoGroupCreate struct {
	config
	mutation *TodoGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *TodoGroupCreate) SetCreatedAt(v time.Time) *TodoGroupCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TodoGroupCreate) SetUpdatedAt(v time.Time) *TodoGroupCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetName sets the "name" field.
func (_c *TodoGroupCreate) SetName(v string) *TodoGroupCreate {
	_c.mutation.SetName(v)
	return _c
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (_c *TodoGroupCreate) AddTodoIDs(ids ...int) *TodoGroupCreate {
	_c.mutation.AddTodoIDs(ids...)
	return _c
}

// AddTodos adds the "todos" edges to the Todo entity.
func (_c *TodoGroupCreate) AddTodos(v ...*Todo) *TodoGroupCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTodoIDs(ids...)
}

// AddGroupedTodoIDs adds the "grouped_todos" edge to the TodoToTodoGroupAssociation entity by IDs.
func (_c *TodoGroupCreate) AddGroupedTodoIDs(ids ...int) *TodoGroupCreate {
	_c.mutation.AddGroupedTodoIDs(ids...)
	return _c
}

// AddGroupedTodos adds the "grouped_todos" edges to the TodoToTodoGroupAssociation entity.
func (_c *TodoGroupCreate) AddGroupedTodos(v ...*TodoToTodoGroupAssociation) *TodoGroupCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupedTodoIDs(ids...)
}

// Mutation returns the TodoGroupMutation object of the builder.
func (_c *TodoGroupCreate) Mutation() *TodoGroupMutation {
	return _c.mutation
}

// Save creates the TodoGroup in the database.
func (_c *TodoGroupCreate) Save(ctx context.Context) (*TodoGroup, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TodoGroupCreate) SaveX(ctx context.Context) *TodoGroup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TodoGroupCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TodoGroupCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TodoGroupCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TodoGroup.created_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TodoGroup.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := todogroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TodoGroup.name": %w`, err)}
		}
	}
	return nil
}

func (_c *TodoGroupCreate) sqlSave(ctx context.Context) (*TodoGroup, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TodoGroupCreate) createSpec() (*TodoGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoGroup{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(todogroup.Table, sqlgraph.NewFieldSpec(todogroup.FieldID, field.TypeInt))
	)
	_spec.Schema = _c.schemaConfig.TodoGroup
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(todogroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(todogroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(todogroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := _c.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   todogroup.TodosTable,
			Columns: todogroup.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupedTodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   todogroup.GroupedTodosTable,
			Columns: []string{todogroup.GroupedTodosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todototodogroupassociation.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.TodoToTodoGroupAssociation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoGroup.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoGroupUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *TodoGroupCreate) OnConflict(opts ...sql.ConflictOption) *TodoGroupUpsertOne {
	_c.conflict = opts
	return &TodoGroupUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TodoGroupCreate) OnConflictColumns(columns ...string) *TodoGroupUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TodoGroupUpsertOne{
		create: _c,
	}
}

type (
	// TodoGroupUpsertOne is the builder for "upsert"-ing
	//  one TodoGroup node.
	TodoGroupUpsertOne struct {
		create *TodoGroupCreate
	}

	// TodoGroupUpsert is the "OnConflict" setter.
	TodoGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoGroupUpsert) SetUpdatedAt(v time.Time) *TodoGroupUpsert {
	u.Set(todogroup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoGroupUpsert) UpdateUpdatedAt() *TodoGroupUpsert {
	u.SetExcluded(todogroup.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *TodoGroupUpsert) SetName(v string) *TodoGroupUpsert {
	u.Set(todogroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TodoGroupUpsert) UpdateName() *TodoGroupUpsert {
	u.SetExcluded(todogroup.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TodoGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TodoGroupUpsertOne) UpdateNewValues() *TodoGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(todogroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TodoGroupUpsertOne) Ignore() *TodoGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoGroupUpsertOne) DoNothing() *TodoGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoGroupCreate.OnConflict
// documentation for more info.
func (u *TodoGroupUpsertOne) Update(set func(*TodoGroupUpsert)) *TodoGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoGroupUpsertOne) SetUpdatedAt(v time.Time) *TodoGroupUpsertOne {
	return u.Update(func(s *TodoGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoGroupUpsertOne) UpdateUpdatedAt() *TodoGroupUpsertOne {
	return u.Update(func(s *TodoGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TodoGroupUpsertOne) SetName(v string) *TodoGroupUpsertOne {
	return u.Update(func(s *TodoGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TodoGroupUpsertOne) UpdateName() *TodoGroupUpsertOne {
	return u.Update(func(s *TodoGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TodoGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TodoGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TodoGroupUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TodoGroupUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TodoGroupCreateBulk is the builder for creating many TodoGroup entities in bulk.
type TodoGroupCreateBulk struct {
	config
	err      error
	builders []*TodoGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the TodoGroup entities in the database.
func (_c *TodoGroupCreateBulk) Save(ctx context.Context) ([]*TodoGroup, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TodoGroup, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TodoGroupCreateBulk) SaveX(ctx context.Context) []*TodoGroup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TodoGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TodoGroupCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoGroupUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *TodoGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *TodoGroupUpsertBulk {
	_c.conflict = opts
	return &TodoGroupUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TodoGroupCreateBulk) OnConflictColumns(columns ...string) *TodoGroupUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TodoGroupUpsertBulk{
		create: _c,
	}
}

// TodoGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of TodoGroup nodes.
type TodoGroupUpsertBulk struct {
	create *TodoGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TodoGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TodoGroupUpsertBulk) UpdateNewValues() *TodoGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(todogroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TodoGroupUpsertBulk) Ignore() *TodoGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoGroupUpsertBulk) DoNothing() *TodoGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoGroupCreateBulk.OnConflict
// documentation for more info.
func (u *TodoGroupUpsertBulk) Update(set func(*TodoGroupUpsert)) *TodoGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoGroupUpsertBulk) SetUpdatedAt(v time.Time) *TodoGroupUpsertBulk {
	return u.Update(func(s *TodoGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoGroupUpsertBulk) UpdateUpdatedAt() *TodoGroupUpsertBulk {
	return u.Update(func(s *TodoGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TodoGroupUpsertBulk) SetName(v string) *TodoGroupUpsertBulk {
	return u.Update(func(s *TodoGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TodoGroupUpsertBulk) UpdateName() *TodoGroupUpsertBulk {
	return u.Update(func(s *TodoGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TodoGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TodoGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TodoGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
