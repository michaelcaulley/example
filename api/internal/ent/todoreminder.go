// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todoreminder"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// A join table holding the relationships of todos to reminders
type TodoReminder struct {
	config `json:"-"`
	// TodoID holds the value of the "todo_id" field.
	TodoID int `json:"todo_id,omitempty"`
	// ReminderID holds the value of the "reminder_id" field.
	ReminderID int `json:"reminder_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoReminderQuery when eager-loading is set.
	Edges        TodoReminderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TodoReminderEdges holds the relations/edges for other nodes in the graph.
type TodoReminderEdges struct {
	// Todo holds the value of the todo edge.
	Todo *Todo `json:"todo,omitempty"`
	// Reminder holds the value of the reminder edge.
	Reminder *Reminder `json:"reminder,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TodoOrErr returns the Todo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoReminderEdges) TodoOrErr() (*Todo, error) {
	if e.Todo != nil {
		return e.Todo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: todo.Label}
	}
	return nil, &NotLoadedError{edge: "todo"}
}

// ReminderOrErr returns the Reminder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoReminderEdges) ReminderOrErr() (*Reminder, error) {
	if e.Reminder != nil {
		return e.Reminder, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: reminder.Label}
	}
	return nil, &NotLoadedError{edge: "reminder"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoReminder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todoreminder.FieldTodoID, todoreminder.FieldReminderID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoReminder fields.
func (_m *TodoReminder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todoreminder.FieldTodoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field todo_id", values[i])
			} else if value.Valid {
				_m.TodoID = int(value.Int64)
			}
		case todoreminder.FieldReminderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reminder_id", values[i])
			} else if value.Valid {
				_m.ReminderID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoReminder.
// This includes values selected through modifiers, order, etc.
func (_m *TodoReminder) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTodo queries the "todo" edge of the TodoReminder entity.
func (_m *TodoReminder) QueryTodo() *TodoQuery {
	return NewTodoReminderClient(_m.config).QueryTodo(_m)
}

// QueryReminder queries the "reminder" edge of the TodoReminder entity.
func (_m *TodoReminder) QueryReminder() *ReminderQuery {
	return NewTodoReminderClient(_m.config).QueryReminder(_m)
}

// Update returns a builder for updating this TodoReminder.
// Note that you need to call TodoReminder.Unwrap() before calling this method if this TodoReminder
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TodoReminder) Update() *TodoReminderUpdateOne {
	return NewTodoReminderClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TodoReminder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TodoReminder) Unwrap() *TodoReminder {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoReminder is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TodoReminder) String() string {
	var builder strings.Builder
	builder.WriteString("TodoReminder(")
	builder.WriteString("todo_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TodoID))
	builder.WriteString(", ")
	builder.WriteString("reminder_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReminderID))
	builder.WriteByte(')')
	return builder.String()
}

// TodoReminders is a parsable slice of TodoReminder.
type TodoReminders []*TodoReminder
