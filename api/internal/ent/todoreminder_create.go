// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todoreminder"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TodoReminderCreate is the builder for creating a TodoReminder entity.
type TodoReminderCreate struct {
	config
	mutation *TodoReminderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTodoID sets the "todo_id" field.
func (_c *TodoReminderCreate) SetTodoID(v int) *TodoReminderCreate {
	_c.mutation.SetTodoID(v)
	return _c
}

// SetReminderID sets the "reminder_id" field.
func (_c *TodoReminderCreate) SetReminderID(v int) *TodoReminderCreate {
	_c.mutation.SetReminderID(v)
	return _c
}

// SetTodo sets the "todo" edge to the Todo entity.
func (_c *TodoReminderCreate) SetTodo(v *Todo) *TodoReminderCreate {
	return _c.SetTodoID(v.ID)
}

// SetReminder sets the "reminder" edge to the Reminder entity.
func (_c *TodoReminderCreate) SetReminder(v *Reminder) *TodoReminderCreate {
	return _c.SetReminderID(v.ID)
}

// Mutation returns the TodoReminderMutation object of the builder.
func (_c *TodoReminderCreate) Mutation() *TodoReminderMutation {
	return _c.mutation
}

// Save creates the TodoReminder in the database.
func (_c *TodoReminderCreate) Save(ctx context.Context) (*TodoReminder, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TodoReminderCreate) SaveX(ctx context.Context) *TodoReminder {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TodoReminderCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TodoReminderCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TodoReminderCreate) check() error {
	if _, ok := _c.mutation.TodoID(); !ok {
		return &ValidationError{Name: "todo_id", err: errors.New(`ent: missing required field "TodoReminder.todo_id"`)}
	}
	if _, ok := _c.mutation.ReminderID(); !ok {
		return &ValidationError{Name: "reminder_id", err: errors.New(`ent: missing required field "TodoReminder.reminder_id"`)}
	}
	if len(_c.mutation.TodoIDs()) == 0 {
		return &ValidationError{Name: "todo", err: errors.New(`ent: missing required edge "TodoReminder.todo"`)}
	}
	if len(_c.mutation.ReminderIDs()) == 0 {
		return &ValidationError{Name: "reminder", err: errors.New(`ent: missing required edge "TodoReminder.reminder"`)}
	}
	return nil
}

func (_c *TodoReminderCreate) sqlSave(ctx context.Context) (*TodoReminder, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (_c *TodoReminderCreate) createSpec() (*TodoReminder, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoReminder{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(todoreminder.Table, nil)
	)
	_spec.Schema = _c.schemaConfig.TodoReminder
	_spec.OnConflict = _c.conflict
	if nodes := _c.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.TodoTable,
			Columns: []string{todoreminder.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.TodoReminder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TodoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ReminderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.ReminderTable,
			Columns: []string{todoreminder.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.TodoReminder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReminderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoReminder.Create().
//		SetTodoID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoReminderUpsert) {
//			SetTodoID(v+v).
//		}).
//		Exec(ctx)
func (_c *TodoReminderCreate) OnConflict(opts ...sql.ConflictOption) *TodoReminderUpsertOne {
	_c.conflict = opts
	return &TodoReminderUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoReminder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TodoReminderCreate) OnConflictColumns(columns ...string) *TodoReminderUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TodoReminderUpsertOne{
		create: _c,
	}
}

type (
	// TodoReminderUpsertOne is the builder for "upsert"-ing
	//  one TodoReminder node.
	TodoReminderUpsertOne struct {
		create *TodoReminderCreate
	}

	// TodoReminderUpsert is the "OnConflict" setter.
	TodoReminderUpsert struct {
		*sql.UpdateSet
	}
)

// SetTodoID sets the "todo_id" field.
func (u *TodoReminderUpsert) SetTodoID(v int) *TodoReminderUpsert {
	u.Set(todoreminder.FieldTodoID, v)
	return u
}

// UpdateTodoID sets the "todo_id" field to the value that was provided on create.
func (u *TodoReminderUpsert) UpdateTodoID() *TodoReminderUpsert {
	u.SetExcluded(todoreminder.FieldTodoID)
	return u
}

// SetReminderID sets the "reminder_id" field.
func (u *TodoReminderUpsert) SetReminderID(v int) *TodoReminderUpsert {
	u.Set(todoreminder.FieldReminderID, v)
	return u
}

// UpdateReminderID sets the "reminder_id" field to the value that was provided on create.
func (u *TodoReminderUpsert) UpdateReminderID() *TodoReminderUpsert {
	u.SetExcluded(todoreminder.FieldReminderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TodoReminder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TodoReminderUpsertOne) UpdateNewValues() *TodoReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoReminder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TodoReminderUpsertOne) Ignore() *TodoReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoReminderUpsertOne) DoNothing() *TodoReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoReminderCreate.OnConflict
// documentation for more info.
func (u *TodoReminderUpsertOne) Update(set func(*TodoReminderUpsert)) *TodoReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoReminderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTodoID sets the "todo_id" field.
func (u *TodoReminderUpsertOne) SetTodoID(v int) *TodoReminderUpsertOne {
	return u.Update(func(s *TodoReminderUpsert) {
		s.SetTodoID(v)
	})
}

// UpdateTodoID sets the "todo_id" field to the value that was provided on create.
func (u *TodoReminderUpsertOne) UpdateTodoID() *TodoReminderUpsertOne {
	return u.Update(func(s *TodoReminderUpsert) {
		s.UpdateTodoID()
	})
}

// SetReminderID sets the "reminder_id" field.
func (u *TodoReminderUpsertOne) SetReminderID(v int) *TodoReminderUpsertOne {
	return u.Update(func(s *TodoReminderUpsert) {
		s.SetReminderID(v)
	})
}

// UpdateReminderID sets the "reminder_id" field to the value that was provided on create.
func (u *TodoReminderUpsertOne) UpdateReminderID() *TodoReminderUpsertOne {
	return u.Update(func(s *TodoReminderUpsert) {
		s.UpdateReminderID()
	})
}

// Exec executes the query.
func (u *TodoReminderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TodoReminderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoReminderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// TodoReminderCreateBulk is the builder for creating many TodoReminder entities in bulk.
type TodoReminderCreateBulk struct {
	config
	err      error
	builders []*TodoReminderCreate
	conflict []sql.ConflictOption
}

// Save creates the TodoReminder entities in the database.
func (_c *TodoReminderCreateBulk) Save(ctx context.Context) ([]*TodoReminder, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*TodoReminder, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoReminderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TodoReminderCreateBulk) SaveX(ctx context.Context) []*TodoReminder {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TodoReminderCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TodoReminderCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoReminder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoReminderUpsert) {
//			SetTodoID(v+v).
//		}).
//		Exec(ctx)
func (_c *TodoReminderCreateBulk) OnConflict(opts ...sql.ConflictOption) *TodoReminderUpsertBulk {
	_c.conflict = opts
	return &TodoReminderUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoReminder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *TodoReminderCreateBulk) OnConflictColumns(columns ...string) *TodoReminderUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &TodoReminderUpsertBulk{
		create: _c,
	}
}

// TodoReminderUpsertBulk is the builder for "upsert"-ing
// a bulk of TodoReminder nodes.
type TodoReminderUpsertBulk struct {
	create *TodoReminderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TodoReminder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TodoReminderUpsertBulk) UpdateNewValues() *TodoReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoReminder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TodoReminderUpsertBulk) Ignore() *TodoReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoReminderUpsertBulk) DoNothing() *TodoReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoReminderCreateBulk.OnConflict
// documentation for more info.
func (u *TodoReminderUpsertBulk) Update(set func(*TodoReminderUpsert)) *TodoReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoReminderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTodoID sets the "todo_id" field.
func (u *TodoReminderUpsertBulk) SetTodoID(v int) *TodoReminderUpsertBulk {
	return u.Update(func(s *TodoReminderUpsert) {
		s.SetTodoID(v)
	})
}

// UpdateTodoID sets the "todo_id" field to the value that was provided on create.
func (u *TodoReminderUpsertBulk) UpdateTodoID() *TodoReminderUpsertBulk {
	return u.Update(func(s *TodoReminderUpsert) {
		s.UpdateTodoID()
	})
}

// SetReminderID sets the "reminder_id" field.
func (u *TodoReminderUpsertBulk) SetReminderID(v int) *TodoReminderUpsertBulk {
	return u.Update(func(s *TodoReminderUpsert) {
		s.SetReminderID(v)
	})
}

// UpdateReminderID sets the "reminder_id" field to the value that was provided on create.
func (u *TodoReminderUpsertBulk) UpdateReminderID() *TodoReminderUpsertBulk {
	return u.Update(func(s *TodoReminderUpsert) {
		s.UpdateReminderID()
	})
}

// Exec executes the query.
func (u *TodoReminderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TodoReminderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TodoReminderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoReminderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
