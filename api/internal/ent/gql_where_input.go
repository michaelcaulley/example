// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"example/internal/ent/predicate"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
	"example/internal/ent/user"
	"fmt"
	"time"
)

// ReminderWhereInput represents a where input for filtering Reminder queries.
type ReminderWhereInput struct {
	Predicates []predicate.Reminder  `json:"-"`
	Not        *ReminderWhereInput   `json:"not,omitempty"`
	Or         []*ReminderWhereInput `json:"or,omitempty"`
	And        []*ReminderWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "todo" edge predicates.
	HasTodo     *bool             `json:"hasTodo,omitempty"`
	HasTodoWith []*TodoWhereInput `json:"hasTodoWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ReminderWhereInput) AddPredicates(predicates ...predicate.Reminder) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ReminderWhereInput filter on the ReminderQuery builder.
func (i *ReminderWhereInput) Filter(q *ReminderQuery) (*ReminderQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyReminderWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyReminderWhereInput is returned in case the ReminderWhereInput is empty.
var ErrEmptyReminderWhereInput = errors.New("ent: empty predicate ReminderWhereInput")

// P returns a predicate for filtering reminders.
// An error is returned if the input is empty or invalid.
func (i *ReminderWhereInput) P() (predicate.Reminder, error) {
	var predicates []predicate.Reminder
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, reminder.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Reminder, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, reminder.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Reminder, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, reminder.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, reminder.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, reminder.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, reminder.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, reminder.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, reminder.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, reminder.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, reminder.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, reminder.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, reminder.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, reminder.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, reminder.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, reminder.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, reminder.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, reminder.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, reminder.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, reminder.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, reminder.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, reminder.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, reminder.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, reminder.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, reminder.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, reminder.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, reminder.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, reminder.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasTodo != nil {
		p := reminder.HasTodo()
		if !*i.HasTodo {
			p = reminder.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTodoWith) > 0 {
		with := make([]predicate.Todo, 0, len(i.HasTodoWith))
		for _, w := range i.HasTodoWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTodoWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, reminder.HasTodoWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyReminderWhereInput
	case 1:
		return predicates[0], nil
	default:
		return reminder.And(predicates...), nil
	}
}

// TodoWhereInput represents a where input for filtering Todo queries.
type TodoWhereInput struct {
	Predicates []predicate.Todo  `json:"-"`
	Not        *TodoWhereInput   `json:"not,omitempty"`
	Or         []*TodoWhereInput `json:"or,omitempty"`
	And        []*TodoWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "text" field predicates.
	Text             *string  `json:"text,omitempty"`
	TextNEQ          *string  `json:"textNEQ,omitempty"`
	TextIn           []string `json:"textIn,omitempty"`
	TextNotIn        []string `json:"textNotIn,omitempty"`
	TextGT           *string  `json:"textGT,omitempty"`
	TextGTE          *string  `json:"textGTE,omitempty"`
	TextLT           *string  `json:"textLT,omitempty"`
	TextLTE          *string  `json:"textLTE,omitempty"`
	TextContains     *string  `json:"textContains,omitempty"`
	TextHasPrefix    *string  `json:"textHasPrefix,omitempty"`
	TextHasSuffix    *string  `json:"textHasSuffix,omitempty"`
	TextEqualFold    *string  `json:"textEqualFold,omitempty"`
	TextContainsFold *string  `json:"textContainsFold,omitempty"`

	// "done_at" field predicates.
	DoneAt       *time.Time  `json:"doneAt,omitempty"`
	DoneAtNEQ    *time.Time  `json:"doneAtNEQ,omitempty"`
	DoneAtIn     []time.Time `json:"doneAtIn,omitempty"`
	DoneAtNotIn  []time.Time `json:"doneAtNotIn,omitempty"`
	DoneAtGT     *time.Time  `json:"doneAtGT,omitempty"`
	DoneAtGTE    *time.Time  `json:"doneAtGTE,omitempty"`
	DoneAtLT     *time.Time  `json:"doneAtLT,omitempty"`
	DoneAtLTE    *time.Time  `json:"doneAtLTE,omitempty"`
	DoneAtIsNil  bool        `json:"doneAtIsNil,omitempty"`
	DoneAtNotNil bool        `json:"doneAtNotNil,omitempty"`

	// "owner_id" field predicates.
	OwnerID      *int  `json:"ownerID,omitempty"`
	OwnerIDNEQ   *int  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn    []int `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn []int `json:"ownerIDNotIn,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`

	// "reminders" edge predicates.
	HasReminders     *bool                 `json:"hasReminders,omitempty"`
	HasRemindersWith []*ReminderWhereInput `json:"hasRemindersWith,omitempty"`

	// "groups" edge predicates.
	HasGroups     *bool                  `json:"hasGroups,omitempty"`
	HasGroupsWith []*TodoGroupWhereInput `json:"hasGroupsWith,omitempty"`

	// "grouped_todos" edge predicates.
	HasGroupedTodos     *bool                                   `json:"hasGroupedTodos,omitempty"`
	HasGroupedTodosWith []*TodoToTodoGroupAssociationWhereInput `json:"hasGroupedTodosWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TodoWhereInput) AddPredicates(predicates ...predicate.Todo) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TodoWhereInput filter on the TodoQuery builder.
func (i *TodoWhereInput) Filter(q *TodoQuery) (*TodoQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTodoWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTodoWhereInput is returned in case the TodoWhereInput is empty.
var ErrEmptyTodoWhereInput = errors.New("ent: empty predicate TodoWhereInput")

// P returns a predicate for filtering todos.
// An error is returned if the input is empty or invalid.
func (i *TodoWhereInput) P() (predicate.Todo, error) {
	var predicates []predicate.Todo
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, todo.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Todo, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, todo.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Todo, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, todo.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, todo.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, todo.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, todo.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, todo.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, todo.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, todo.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, todo.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, todo.IDLTE(*i.IDLTE))
	}
	if i.Text != nil {
		predicates = append(predicates, todo.TextEQ(*i.Text))
	}
	if i.TextNEQ != nil {
		predicates = append(predicates, todo.TextNEQ(*i.TextNEQ))
	}
	if len(i.TextIn) > 0 {
		predicates = append(predicates, todo.TextIn(i.TextIn...))
	}
	if len(i.TextNotIn) > 0 {
		predicates = append(predicates, todo.TextNotIn(i.TextNotIn...))
	}
	if i.TextGT != nil {
		predicates = append(predicates, todo.TextGT(*i.TextGT))
	}
	if i.TextGTE != nil {
		predicates = append(predicates, todo.TextGTE(*i.TextGTE))
	}
	if i.TextLT != nil {
		predicates = append(predicates, todo.TextLT(*i.TextLT))
	}
	if i.TextLTE != nil {
		predicates = append(predicates, todo.TextLTE(*i.TextLTE))
	}
	if i.TextContains != nil {
		predicates = append(predicates, todo.TextContains(*i.TextContains))
	}
	if i.TextHasPrefix != nil {
		predicates = append(predicates, todo.TextHasPrefix(*i.TextHasPrefix))
	}
	if i.TextHasSuffix != nil {
		predicates = append(predicates, todo.TextHasSuffix(*i.TextHasSuffix))
	}
	if i.TextEqualFold != nil {
		predicates = append(predicates, todo.TextEqualFold(*i.TextEqualFold))
	}
	if i.TextContainsFold != nil {
		predicates = append(predicates, todo.TextContainsFold(*i.TextContainsFold))
	}
	if i.DoneAt != nil {
		predicates = append(predicates, todo.DoneAtEQ(*i.DoneAt))
	}
	if i.DoneAtNEQ != nil {
		predicates = append(predicates, todo.DoneAtNEQ(*i.DoneAtNEQ))
	}
	if len(i.DoneAtIn) > 0 {
		predicates = append(predicates, todo.DoneAtIn(i.DoneAtIn...))
	}
	if len(i.DoneAtNotIn) > 0 {
		predicates = append(predicates, todo.DoneAtNotIn(i.DoneAtNotIn...))
	}
	if i.DoneAtGT != nil {
		predicates = append(predicates, todo.DoneAtGT(*i.DoneAtGT))
	}
	if i.DoneAtGTE != nil {
		predicates = append(predicates, todo.DoneAtGTE(*i.DoneAtGTE))
	}
	if i.DoneAtLT != nil {
		predicates = append(predicates, todo.DoneAtLT(*i.DoneAtLT))
	}
	if i.DoneAtLTE != nil {
		predicates = append(predicates, todo.DoneAtLTE(*i.DoneAtLTE))
	}
	if i.DoneAtIsNil {
		predicates = append(predicates, todo.DoneAtIsNil())
	}
	if i.DoneAtNotNil {
		predicates = append(predicates, todo.DoneAtNotNil())
	}
	if i.OwnerID != nil {
		predicates = append(predicates, todo.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, todo.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, todo.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, todo.OwnerIDNotIn(i.OwnerIDNotIn...))
	}

	if i.HasOwner != nil {
		p := todo.HasOwner()
		if !*i.HasOwner {
			p = todo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todo.HasOwnerWith(with...))
	}
	if i.HasReminders != nil {
		p := todo.HasReminders()
		if !*i.HasReminders {
			p = todo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRemindersWith) > 0 {
		with := make([]predicate.Reminder, 0, len(i.HasRemindersWith))
		for _, w := range i.HasRemindersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRemindersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todo.HasRemindersWith(with...))
	}
	if i.HasGroups != nil {
		p := todo.HasGroups()
		if !*i.HasGroups {
			p = todo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupsWith) > 0 {
		with := make([]predicate.TodoGroup, 0, len(i.HasGroupsWith))
		for _, w := range i.HasGroupsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todo.HasGroupsWith(with...))
	}
	if i.HasGroupedTodos != nil {
		p := todo.HasGroupedTodos()
		if !*i.HasGroupedTodos {
			p = todo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupedTodosWith) > 0 {
		with := make([]predicate.TodoToTodoGroupAssociation, 0, len(i.HasGroupedTodosWith))
		for _, w := range i.HasGroupedTodosWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupedTodosWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todo.HasGroupedTodosWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTodoWhereInput
	case 1:
		return predicates[0], nil
	default:
		return todo.And(predicates...), nil
	}
}

// TodoGroupWhereInput represents a where input for filtering TodoGroup queries.
type TodoGroupWhereInput struct {
	Predicates []predicate.TodoGroup  `json:"-"`
	Not        *TodoGroupWhereInput   `json:"not,omitempty"`
	Or         []*TodoGroupWhereInput `json:"or,omitempty"`
	And        []*TodoGroupWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "todos" edge predicates.
	HasTodos     *bool             `json:"hasTodos,omitempty"`
	HasTodosWith []*TodoWhereInput `json:"hasTodosWith,omitempty"`

	// "grouped_todos" edge predicates.
	HasGroupedTodos     *bool                                   `json:"hasGroupedTodos,omitempty"`
	HasGroupedTodosWith []*TodoToTodoGroupAssociationWhereInput `json:"hasGroupedTodosWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TodoGroupWhereInput) AddPredicates(predicates ...predicate.TodoGroup) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TodoGroupWhereInput filter on the TodoGroupQuery builder.
func (i *TodoGroupWhereInput) Filter(q *TodoGroupQuery) (*TodoGroupQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTodoGroupWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTodoGroupWhereInput is returned in case the TodoGroupWhereInput is empty.
var ErrEmptyTodoGroupWhereInput = errors.New("ent: empty predicate TodoGroupWhereInput")

// P returns a predicate for filtering todogroups.
// An error is returned if the input is empty or invalid.
func (i *TodoGroupWhereInput) P() (predicate.TodoGroup, error) {
	var predicates []predicate.TodoGroup
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, todogroup.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TodoGroup, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, todogroup.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TodoGroup, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, todogroup.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, todogroup.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, todogroup.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, todogroup.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, todogroup.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, todogroup.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, todogroup.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, todogroup.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, todogroup.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, todogroup.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, todogroup.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, todogroup.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, todogroup.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, todogroup.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, todogroup.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, todogroup.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, todogroup.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, todogroup.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, todogroup.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, todogroup.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, todogroup.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, todogroup.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, todogroup.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, todogroup.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, todogroup.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, todogroup.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, todogroup.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, todogroup.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, todogroup.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, todogroup.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, todogroup.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, todogroup.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, todogroup.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, todogroup.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, todogroup.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, todogroup.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, todogroup.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, todogroup.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasTodos != nil {
		p := todogroup.HasTodos()
		if !*i.HasTodos {
			p = todogroup.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTodosWith) > 0 {
		with := make([]predicate.Todo, 0, len(i.HasTodosWith))
		for _, w := range i.HasTodosWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTodosWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todogroup.HasTodosWith(with...))
	}
	if i.HasGroupedTodos != nil {
		p := todogroup.HasGroupedTodos()
		if !*i.HasGroupedTodos {
			p = todogroup.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupedTodosWith) > 0 {
		with := make([]predicate.TodoToTodoGroupAssociation, 0, len(i.HasGroupedTodosWith))
		for _, w := range i.HasGroupedTodosWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupedTodosWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todogroup.HasGroupedTodosWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTodoGroupWhereInput
	case 1:
		return predicates[0], nil
	default:
		return todogroup.And(predicates...), nil
	}
}

// TodoToTodoGroupAssociationWhereInput represents a where input for filtering TodoToTodoGroupAssociation queries.
type TodoToTodoGroupAssociationWhereInput struct {
	Predicates []predicate.TodoToTodoGroupAssociation  `json:"-"`
	Not        *TodoToTodoGroupAssociationWhereInput   `json:"not,omitempty"`
	Or         []*TodoToTodoGroupAssociationWhereInput `json:"or,omitempty"`
	And        []*TodoToTodoGroupAssociationWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "todo_id" field predicates.
	TodoID      *int  `json:"todoID,omitempty"`
	TodoIDNEQ   *int  `json:"todoIDNEQ,omitempty"`
	TodoIDIn    []int `json:"todoIDIn,omitempty"`
	TodoIDNotIn []int `json:"todoIDNotIn,omitempty"`

	// "todo_group_really_really_long_identifier" field predicates.
	TodoGroupReallyReallyLongIdentifier      *int  `json:"todoGroupReallyReallyLongIdentifier,omitempty"`
	TodoGroupReallyReallyLongIdentifierNEQ   *int  `json:"todoGroupReallyReallyLongIdentifierNEQ,omitempty"`
	TodoGroupReallyReallyLongIdentifierIn    []int `json:"todoGroupReallyReallyLongIdentifierIn,omitempty"`
	TodoGroupReallyReallyLongIdentifierNotIn []int `json:"todoGroupReallyReallyLongIdentifierNotIn,omitempty"`

	// "assignee_id" field predicates.
	AssigneeID      *int  `json:"assigneeID,omitempty"`
	AssigneeIDNEQ   *int  `json:"assigneeIDNEQ,omitempty"`
	AssigneeIDIn    []int `json:"assigneeIDIn,omitempty"`
	AssigneeIDNotIn []int `json:"assigneeIDNotIn,omitempty"`
	AssigneeIDGT    *int  `json:"assigneeIDGT,omitempty"`
	AssigneeIDGTE   *int  `json:"assigneeIDGTE,omitempty"`
	AssigneeIDLT    *int  `json:"assigneeIDLT,omitempty"`
	AssigneeIDLTE   *int  `json:"assigneeIDLTE,omitempty"`

	// "todo" edge predicates.
	HasTodo     *bool             `json:"hasTodo,omitempty"`
	HasTodoWith []*TodoWhereInput `json:"hasTodoWith,omitempty"`

	// "todo_group" edge predicates.
	HasTodoGroup     *bool                  `json:"hasTodoGroup,omitempty"`
	HasTodoGroupWith []*TodoGroupWhereInput `json:"hasTodoGroupWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TodoToTodoGroupAssociationWhereInput) AddPredicates(predicates ...predicate.TodoToTodoGroupAssociation) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TodoToTodoGroupAssociationWhereInput filter on the TodoToTodoGroupAssociationQuery builder.
func (i *TodoToTodoGroupAssociationWhereInput) Filter(q *TodoToTodoGroupAssociationQuery) (*TodoToTodoGroupAssociationQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTodoToTodoGroupAssociationWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTodoToTodoGroupAssociationWhereInput is returned in case the TodoToTodoGroupAssociationWhereInput is empty.
var ErrEmptyTodoToTodoGroupAssociationWhereInput = errors.New("ent: empty predicate TodoToTodoGroupAssociationWhereInput")

// P returns a predicate for filtering todototodogroupassociations.
// An error is returned if the input is empty or invalid.
func (i *TodoToTodoGroupAssociationWhereInput) P() (predicate.TodoToTodoGroupAssociation, error) {
	var predicates []predicate.TodoToTodoGroupAssociation
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, todototodogroupassociation.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.TodoToTodoGroupAssociation, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, todototodogroupassociation.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.TodoToTodoGroupAssociation, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, todototodogroupassociation.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, todototodogroupassociation.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, todototodogroupassociation.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, todototodogroupassociation.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, todototodogroupassociation.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, todototodogroupassociation.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, todototodogroupassociation.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, todototodogroupassociation.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, todototodogroupassociation.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, todototodogroupassociation.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, todototodogroupassociation.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, todototodogroupassociation.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, todototodogroupassociation.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, todototodogroupassociation.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.TodoID != nil {
		predicates = append(predicates, todototodogroupassociation.TodoIDEQ(*i.TodoID))
	}
	if i.TodoIDNEQ != nil {
		predicates = append(predicates, todototodogroupassociation.TodoIDNEQ(*i.TodoIDNEQ))
	}
	if len(i.TodoIDIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.TodoIDIn(i.TodoIDIn...))
	}
	if len(i.TodoIDNotIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.TodoIDNotIn(i.TodoIDNotIn...))
	}
	if i.TodoGroupReallyReallyLongIdentifier != nil {
		predicates = append(predicates, todototodogroupassociation.TodoGroupReallyReallyLongIdentifierEQ(*i.TodoGroupReallyReallyLongIdentifier))
	}
	if i.TodoGroupReallyReallyLongIdentifierNEQ != nil {
		predicates = append(predicates, todototodogroupassociation.TodoGroupReallyReallyLongIdentifierNEQ(*i.TodoGroupReallyReallyLongIdentifierNEQ))
	}
	if len(i.TodoGroupReallyReallyLongIdentifierIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.TodoGroupReallyReallyLongIdentifierIn(i.TodoGroupReallyReallyLongIdentifierIn...))
	}
	if len(i.TodoGroupReallyReallyLongIdentifierNotIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.TodoGroupReallyReallyLongIdentifierNotIn(i.TodoGroupReallyReallyLongIdentifierNotIn...))
	}
	if i.AssigneeID != nil {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDEQ(*i.AssigneeID))
	}
	if i.AssigneeIDNEQ != nil {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDNEQ(*i.AssigneeIDNEQ))
	}
	if len(i.AssigneeIDIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDIn(i.AssigneeIDIn...))
	}
	if len(i.AssigneeIDNotIn) > 0 {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDNotIn(i.AssigneeIDNotIn...))
	}
	if i.AssigneeIDGT != nil {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDGT(*i.AssigneeIDGT))
	}
	if i.AssigneeIDGTE != nil {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDGTE(*i.AssigneeIDGTE))
	}
	if i.AssigneeIDLT != nil {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDLT(*i.AssigneeIDLT))
	}
	if i.AssigneeIDLTE != nil {
		predicates = append(predicates, todototodogroupassociation.AssigneeIDLTE(*i.AssigneeIDLTE))
	}

	if i.HasTodo != nil {
		p := todototodogroupassociation.HasTodo()
		if !*i.HasTodo {
			p = todototodogroupassociation.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTodoWith) > 0 {
		with := make([]predicate.Todo, 0, len(i.HasTodoWith))
		for _, w := range i.HasTodoWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTodoWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todototodogroupassociation.HasTodoWith(with...))
	}
	if i.HasTodoGroup != nil {
		p := todototodogroupassociation.HasTodoGroup()
		if !*i.HasTodoGroup {
			p = todototodogroupassociation.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTodoGroupWith) > 0 {
		with := make([]predicate.TodoGroup, 0, len(i.HasTodoGroupWith))
		for _, w := range i.HasTodoGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTodoGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todototodogroupassociation.HasTodoGroupWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTodoToTodoGroupAssociationWhereInput
	case 1:
		return predicates[0], nil
	default:
		return todototodogroupassociation.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "todos" edge predicates.
	HasTodos     *bool             `json:"hasTodos,omitempty"`
	HasTodosWith []*TodoWhereInput `json:"hasTodosWith,omitempty"`

	// "moderator_users" edge predicates.
	HasModeratorUsers     *bool             `json:"hasModeratorUsers,omitempty"`
	HasModeratorUsersWith []*UserWhereInput `json:"hasModeratorUsersWith,omitempty"`

	// "moderators" edge predicates.
	HasModerators     *bool             `json:"hasModerators,omitempty"`
	HasModeratorsWith []*UserWhereInput `json:"hasModeratorsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasTodos != nil {
		p := user.HasTodos()
		if !*i.HasTodos {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTodosWith) > 0 {
		with := make([]predicate.Todo, 0, len(i.HasTodosWith))
		for _, w := range i.HasTodosWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTodosWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasTodosWith(with...))
	}
	if i.HasModeratorUsers != nil {
		p := user.HasModeratorUsers()
		if !*i.HasModeratorUsers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasModeratorUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasModeratorUsersWith))
		for _, w := range i.HasModeratorUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasModeratorUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasModeratorUsersWith(with...))
	}
	if i.HasModerators != nil {
		p := user.HasModerators()
		if !*i.HasModerators {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasModeratorsWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasModeratorsWith))
		for _, w := range i.HasModeratorsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasModeratorsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasModeratorsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
