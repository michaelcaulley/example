// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/todogroup"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TodoGroup is the model entity for the TodoGroup schema.
type TodoGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoGroupQuery when eager-loading is set.
	Edges        TodoGroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TodoGroupEdges holds the relations/edges for other nodes in the graph.
type TodoGroupEdges struct {
	// Todos holds the value of the todos edge.
	Todos []*Todo `json:"todos,omitempty"`
	// GroupedTodos holds the value of the grouped_todos edge.
	GroupedTodos []*TodoToTodoGroupAssociation `json:"grouped_todos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTodos        map[string][]*Todo
	namedGroupedTodos map[string][]*TodoToTodoGroupAssociation
}

// TodosOrErr returns the Todos value or an error if the edge
// was not loaded in eager-loading.
func (e TodoGroupEdges) TodosOrErr() ([]*Todo, error) {
	if e.loadedTypes[0] {
		return e.Todos, nil
	}
	return nil, &NotLoadedError{edge: "todos"}
}

// GroupedTodosOrErr returns the GroupedTodos value or an error if the edge
// was not loaded in eager-loading.
func (e TodoGroupEdges) GroupedTodosOrErr() ([]*TodoToTodoGroupAssociation, error) {
	if e.loadedTypes[1] {
		return e.GroupedTodos, nil
	}
	return nil, &NotLoadedError{edge: "grouped_todos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todogroup.FieldID:
			values[i] = new(sql.NullInt64)
		case todogroup.FieldName:
			values[i] = new(sql.NullString)
		case todogroup.FieldCreatedAt, todogroup.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoGroup fields.
func (_m *TodoGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todogroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case todogroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case todogroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case todogroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoGroup.
// This includes values selected through modifiers, order, etc.
func (_m *TodoGroup) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTodos queries the "todos" edge of the TodoGroup entity.
func (_m *TodoGroup) QueryTodos() *TodoQuery {
	return NewTodoGroupClient(_m.config).QueryTodos(_m)
}

// QueryGroupedTodos queries the "grouped_todos" edge of the TodoGroup entity.
func (_m *TodoGroup) QueryGroupedTodos() *TodoToTodoGroupAssociationQuery {
	return NewTodoGroupClient(_m.config).QueryGroupedTodos(_m)
}

// Update returns a builder for updating this TodoGroup.
// Note that you need to call TodoGroup.Unwrap() before calling this method if this TodoGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TodoGroup) Update() *TodoGroupUpdateOne {
	return NewTodoGroupClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TodoGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TodoGroup) Unwrap() *TodoGroup {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoGroup is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TodoGroup) String() string {
	var builder strings.Builder
	builder.WriteString("TodoGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTodos returns the Todos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TodoGroup) NamedTodos(name string) ([]*Todo, error) {
	if _m.Edges.namedTodos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTodos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TodoGroup) appendNamedTodos(name string, edges ...*Todo) {
	if _m.Edges.namedTodos == nil {
		_m.Edges.namedTodos = make(map[string][]*Todo)
	}
	if len(edges) == 0 {
		_m.Edges.namedTodos[name] = []*Todo{}
	} else {
		_m.Edges.namedTodos[name] = append(_m.Edges.namedTodos[name], edges...)
	}
}

// NamedGroupedTodos returns the GroupedTodos named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TodoGroup) NamedGroupedTodos(name string) ([]*TodoToTodoGroupAssociation, error) {
	if _m.Edges.namedGroupedTodos == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedGroupedTodos[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TodoGroup) appendNamedGroupedTodos(name string, edges ...*TodoToTodoGroupAssociation) {
	if _m.Edges.namedGroupedTodos == nil {
		_m.Edges.namedGroupedTodos = make(map[string][]*TodoToTodoGroupAssociation)
	}
	if len(edges) == 0 {
		_m.Edges.namedGroupedTodos[name] = []*TodoToTodoGroupAssociation{}
	} else {
		_m.Edges.namedGroupedTodos[name] = append(_m.Edges.namedGroupedTodos[name], edges...)
	}
}

// TodoGroups is a parsable slice of TodoGroup.
type TodoGroups []*TodoGroup
