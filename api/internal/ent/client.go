// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"example/internal/ent/migrate"

	"example/internal/ent/moderator"
	"example/internal/ent/peoplepartner"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todoreminder"
	"example/internal/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"

	stdsql "database/sql"
	"example/internal/ent/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Moderator is the client for interacting with the Moderator builders.
	Moderator *ModeratorClient
	// PeoplePartner is the client for interacting with the PeoplePartner builders.
	PeoplePartner *PeoplePartnerClient
	// Reminder is the client for interacting with the Reminder builders.
	Reminder *ReminderClient
	// Todo is the client for interacting with the Todo builders.
	Todo *TodoClient
	// TodoReminder is the client for interacting with the TodoReminder builders.
	TodoReminder *TodoReminderClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Moderator = NewModeratorClient(c.config)
	c.PeoplePartner = NewPeoplePartnerClient(c.config)
	c.Reminder = NewReminderClient(c.config)
	c.Todo = NewTodoClient(c.config)
	c.TodoReminder = NewTodoReminderClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.schemaConfig = DefaultSchemaConfig
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Moderator:     NewModeratorClient(cfg),
		PeoplePartner: NewPeoplePartnerClient(cfg),
		Reminder:      NewReminderClient(cfg),
		Todo:          NewTodoClient(cfg),
		TodoReminder:  NewTodoReminderClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Moderator:     NewModeratorClient(cfg),
		PeoplePartner: NewPeoplePartnerClient(cfg),
		Reminder:      NewReminderClient(cfg),
		Todo:          NewTodoClient(cfg),
		TodoReminder:  NewTodoReminderClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Moderator.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Moderator, c.PeoplePartner, c.Reminder, c.Todo, c.TodoReminder, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Moderator, c.PeoplePartner, c.Reminder, c.Todo, c.TodoReminder, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ModeratorMutation:
		return c.Moderator.mutate(ctx, m)
	case *PeoplePartnerMutation:
		return c.PeoplePartner.mutate(ctx, m)
	case *ReminderMutation:
		return c.Reminder.mutate(ctx, m)
	case *TodoMutation:
		return c.Todo.mutate(ctx, m)
	case *TodoReminderMutation:
		return c.TodoReminder.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ModeratorClient is a client for the Moderator schema.
type ModeratorClient struct {
	config
}

// NewModeratorClient returns a client for the Moderator from the given config.
func NewModeratorClient(c config) *ModeratorClient {
	return &ModeratorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `moderator.Hooks(f(g(h())))`.
func (c *ModeratorClient) Use(hooks ...Hook) {
	c.hooks.Moderator = append(c.hooks.Moderator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `moderator.Intercept(f(g(h())))`.
func (c *ModeratorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Moderator = append(c.inters.Moderator, interceptors...)
}

// Create returns a builder for creating a Moderator entity.
func (c *ModeratorClient) Create() *ModeratorCreate {
	mutation := newModeratorMutation(c.config, OpCreate)
	return &ModeratorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Moderator entities.
func (c *ModeratorClient) CreateBulk(builders ...*ModeratorCreate) *ModeratorCreateBulk {
	return &ModeratorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ModeratorClient) MapCreateBulk(slice any, setFunc func(*ModeratorCreate, int)) *ModeratorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ModeratorCreateBulk{err: fmt.Errorf("calling to ModeratorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ModeratorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ModeratorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Moderator.
func (c *ModeratorClient) Update() *ModeratorUpdate {
	mutation := newModeratorMutation(c.config, OpUpdate)
	return &ModeratorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModeratorClient) UpdateOne(_m *Moderator) *ModeratorUpdateOne {
	mutation := newModeratorMutation(c.config, OpUpdateOne)
	mutation.user = &_m.UserID
	mutation.moderator = &_m.ModeratorUserID
	return &ModeratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Moderator.
func (c *ModeratorClient) Delete() *ModeratorDelete {
	mutation := newModeratorMutation(c.config, OpDelete)
	return &ModeratorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for Moderator.
func (c *ModeratorClient) Query() *ModeratorQuery {
	return &ModeratorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeModerator},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a Moderator.
func (c *ModeratorClient) QueryUser(_m *Moderator) *UserQuery {
	return c.Query().
		Where(moderator.UserID(_m.UserID), moderator.ModeratorUserID(_m.ModeratorUserID)).
		QueryUser()
}

// QueryModerator queries the moderator edge of a Moderator.
func (c *ModeratorClient) QueryModerator(_m *Moderator) *UserQuery {
	return c.Query().
		Where(moderator.UserID(_m.UserID), moderator.ModeratorUserID(_m.ModeratorUserID)).
		QueryModerator()
}

// Hooks returns the client hooks.
func (c *ModeratorClient) Hooks() []Hook {
	return c.hooks.Moderator
}

// Interceptors returns the client interceptors.
func (c *ModeratorClient) Interceptors() []Interceptor {
	return c.inters.Moderator
}

func (c *ModeratorClient) mutate(ctx context.Context, m *ModeratorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ModeratorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ModeratorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ModeratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ModeratorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Moderator mutation op: %q", m.Op())
	}
}

// PeoplePartnerClient is a client for the PeoplePartner schema.
type PeoplePartnerClient struct {
	config
}

// NewPeoplePartnerClient returns a client for the PeoplePartner from the given config.
func NewPeoplePartnerClient(c config) *PeoplePartnerClient {
	return &PeoplePartnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `peoplepartner.Hooks(f(g(h())))`.
func (c *PeoplePartnerClient) Use(hooks ...Hook) {
	c.hooks.PeoplePartner = append(c.hooks.PeoplePartner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `peoplepartner.Intercept(f(g(h())))`.
func (c *PeoplePartnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.PeoplePartner = append(c.inters.PeoplePartner, interceptors...)
}

// Create returns a builder for creating a PeoplePartner entity.
func (c *PeoplePartnerClient) Create() *PeoplePartnerCreate {
	mutation := newPeoplePartnerMutation(c.config, OpCreate)
	return &PeoplePartnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PeoplePartner entities.
func (c *PeoplePartnerClient) CreateBulk(builders ...*PeoplePartnerCreate) *PeoplePartnerCreateBulk {
	return &PeoplePartnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PeoplePartnerClient) MapCreateBulk(slice any, setFunc func(*PeoplePartnerCreate, int)) *PeoplePartnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PeoplePartnerCreateBulk{err: fmt.Errorf("calling to PeoplePartnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PeoplePartnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PeoplePartnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PeoplePartner.
func (c *PeoplePartnerClient) Update() *PeoplePartnerUpdate {
	mutation := newPeoplePartnerMutation(c.config, OpUpdate)
	return &PeoplePartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PeoplePartnerClient) UpdateOne(_m *PeoplePartner) *PeoplePartnerUpdateOne {
	mutation := newPeoplePartnerMutation(c.config, OpUpdateOne)
	mutation.user = &_m.UserID
	mutation.people_partner = &_m.PeoplePartnerUserID
	return &PeoplePartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PeoplePartner.
func (c *PeoplePartnerClient) Delete() *PeoplePartnerDelete {
	mutation := newPeoplePartnerMutation(c.config, OpDelete)
	return &PeoplePartnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for PeoplePartner.
func (c *PeoplePartnerClient) Query() *PeoplePartnerQuery {
	return &PeoplePartnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePeoplePartner},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a PeoplePartner.
func (c *PeoplePartnerClient) QueryUser(_m *PeoplePartner) *UserQuery {
	return c.Query().
		Where(peoplepartner.UserID(_m.UserID), peoplepartner.PeoplePartnerUserID(_m.PeoplePartnerUserID)).
		QueryUser()
}

// QueryPeoplePartner queries the people_partner edge of a PeoplePartner.
func (c *PeoplePartnerClient) QueryPeoplePartner(_m *PeoplePartner) *UserQuery {
	return c.Query().
		Where(peoplepartner.UserID(_m.UserID), peoplepartner.PeoplePartnerUserID(_m.PeoplePartnerUserID)).
		QueryPeoplePartner()
}

// Hooks returns the client hooks.
func (c *PeoplePartnerClient) Hooks() []Hook {
	return c.hooks.PeoplePartner
}

// Interceptors returns the client interceptors.
func (c *PeoplePartnerClient) Interceptors() []Interceptor {
	return c.inters.PeoplePartner
}

func (c *PeoplePartnerClient) mutate(ctx context.Context, m *PeoplePartnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PeoplePartnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PeoplePartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PeoplePartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PeoplePartnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PeoplePartner mutation op: %q", m.Op())
	}
}

// ReminderClient is a client for the Reminder schema.
type ReminderClient struct {
	config
}

// NewReminderClient returns a client for the Reminder from the given config.
func NewReminderClient(c config) *ReminderClient {
	return &ReminderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reminder.Hooks(f(g(h())))`.
func (c *ReminderClient) Use(hooks ...Hook) {
	c.hooks.Reminder = append(c.hooks.Reminder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reminder.Intercept(f(g(h())))`.
func (c *ReminderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reminder = append(c.inters.Reminder, interceptors...)
}

// Create returns a builder for creating a Reminder entity.
func (c *ReminderClient) Create() *ReminderCreate {
	mutation := newReminderMutation(c.config, OpCreate)
	return &ReminderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reminder entities.
func (c *ReminderClient) CreateBulk(builders ...*ReminderCreate) *ReminderCreateBulk {
	return &ReminderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReminderClient) MapCreateBulk(slice any, setFunc func(*ReminderCreate, int)) *ReminderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReminderCreateBulk{err: fmt.Errorf("calling to ReminderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReminderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReminderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reminder.
func (c *ReminderClient) Update() *ReminderUpdate {
	mutation := newReminderMutation(c.config, OpUpdate)
	return &ReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReminderClient) UpdateOne(_m *Reminder) *ReminderUpdateOne {
	mutation := newReminderMutation(c.config, OpUpdateOne, withReminder(_m))
	return &ReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReminderClient) UpdateOneID(id int) *ReminderUpdateOne {
	mutation := newReminderMutation(c.config, OpUpdateOne, withReminderID(id))
	return &ReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reminder.
func (c *ReminderClient) Delete() *ReminderDelete {
	mutation := newReminderMutation(c.config, OpDelete)
	return &ReminderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReminderClient) DeleteOne(_m *Reminder) *ReminderDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReminderClient) DeleteOneID(id int) *ReminderDeleteOne {
	builder := c.Delete().Where(reminder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReminderDeleteOne{builder}
}

// Query returns a query builder for Reminder.
func (c *ReminderClient) Query() *ReminderQuery {
	return &ReminderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReminder},
		inters: c.Interceptors(),
	}
}

// Get returns a Reminder entity by its id.
func (c *ReminderClient) Get(ctx context.Context, id int) (*Reminder, error) {
	return c.Query().Where(reminder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReminderClient) GetX(ctx context.Context, id int) *Reminder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTodo queries the todo edge of a Reminder.
func (c *ReminderClient) QueryTodo(_m *Reminder) *TodoQuery {
	query := (&TodoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reminder.Table, reminder.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, reminder.TodoTable, reminder.TodoPrimaryKey...),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.Todo
		step.Edge.Schema = schemaConfig.TodoReminder
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTodoReminders queries the todo_reminders edge of a Reminder.
func (c *ReminderClient) QueryTodoReminders(_m *Reminder) *TodoReminderQuery {
	query := (&TodoReminderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reminder.Table, reminder.FieldID, id),
			sqlgraph.To(todoreminder.Table, todoreminder.ReminderColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, reminder.TodoRemindersTable, reminder.TodoRemindersColumn),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.TodoReminder
		step.Edge.Schema = schemaConfig.TodoReminder
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReminderClient) Hooks() []Hook {
	hooks := c.hooks.Reminder
	return append(hooks[:len(hooks):len(hooks)], reminder.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReminderClient) Interceptors() []Interceptor {
	return c.inters.Reminder
}

func (c *ReminderClient) mutate(ctx context.Context, m *ReminderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReminderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReminderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reminder mutation op: %q", m.Op())
	}
}

// TodoClient is a client for the Todo schema.
type TodoClient struct {
	config
}

// NewTodoClient returns a client for the Todo from the given config.
func NewTodoClient(c config) *TodoClient {
	return &TodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todo.Hooks(f(g(h())))`.
func (c *TodoClient) Use(hooks ...Hook) {
	c.hooks.Todo = append(c.hooks.Todo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `todo.Intercept(f(g(h())))`.
func (c *TodoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Todo = append(c.inters.Todo, interceptors...)
}

// Create returns a builder for creating a Todo entity.
func (c *TodoClient) Create() *TodoCreate {
	mutation := newTodoMutation(c.config, OpCreate)
	return &TodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Todo entities.
func (c *TodoClient) CreateBulk(builders ...*TodoCreate) *TodoCreateBulk {
	return &TodoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TodoClient) MapCreateBulk(slice any, setFunc func(*TodoCreate, int)) *TodoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TodoCreateBulk{err: fmt.Errorf("calling to TodoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TodoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Todo.
func (c *TodoClient) Update() *TodoUpdate {
	mutation := newTodoMutation(c.config, OpUpdate)
	return &TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodoClient) UpdateOne(_m *Todo) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodo(_m))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TodoClient) UpdateOneID(id int) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodoID(id))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Todo.
func (c *TodoClient) Delete() *TodoDelete {
	mutation := newTodoMutation(c.config, OpDelete)
	return &TodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TodoClient) DeleteOne(_m *Todo) *TodoDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TodoClient) DeleteOneID(id int) *TodoDeleteOne {
	builder := c.Delete().Where(todo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TodoDeleteOne{builder}
}

// Query returns a query builder for Todo.
func (c *TodoClient) Query() *TodoQuery {
	return &TodoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTodo},
		inters: c.Interceptors(),
	}
}

// Get returns a Todo entity by its id.
func (c *TodoClient) Get(ctx context.Context, id int) (*Todo, error) {
	return c.Query().Where(todo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TodoClient) GetX(ctx context.Context, id int) *Todo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Todo.
func (c *TodoClient) QueryOwner(_m *Todo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, todo.OwnerTable, todo.OwnerColumn),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Todo
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReminders queries the reminders edge of a Todo.
func (c *TodoClient) QueryReminders(_m *Todo) *ReminderQuery {
	query := (&ReminderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(reminder.Table, reminder.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, todo.RemindersTable, todo.RemindersPrimaryKey...),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.Reminder
		step.Edge.Schema = schemaConfig.TodoReminder
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTodoReminders queries the todo_reminders edge of a Todo.
func (c *TodoClient) QueryTodoReminders(_m *Todo) *TodoReminderQuery {
	query := (&TodoReminderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(todoreminder.Table, todoreminder.TodoColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, todo.TodoRemindersTable, todo.TodoRemindersColumn),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.TodoReminder
		step.Edge.Schema = schemaConfig.TodoReminder
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TodoClient) Hooks() []Hook {
	return c.hooks.Todo
}

// Interceptors returns the client interceptors.
func (c *TodoClient) Interceptors() []Interceptor {
	return c.inters.Todo
}

func (c *TodoClient) mutate(ctx context.Context, m *TodoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TodoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TodoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Todo mutation op: %q", m.Op())
	}
}

// TodoReminderClient is a client for the TodoReminder schema.
type TodoReminderClient struct {
	config
}

// NewTodoReminderClient returns a client for the TodoReminder from the given config.
func NewTodoReminderClient(c config) *TodoReminderClient {
	return &TodoReminderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todoreminder.Hooks(f(g(h())))`.
func (c *TodoReminderClient) Use(hooks ...Hook) {
	c.hooks.TodoReminder = append(c.hooks.TodoReminder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `todoreminder.Intercept(f(g(h())))`.
func (c *TodoReminderClient) Intercept(interceptors ...Interceptor) {
	c.inters.TodoReminder = append(c.inters.TodoReminder, interceptors...)
}

// Create returns a builder for creating a TodoReminder entity.
func (c *TodoReminderClient) Create() *TodoReminderCreate {
	mutation := newTodoReminderMutation(c.config, OpCreate)
	return &TodoReminderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TodoReminder entities.
func (c *TodoReminderClient) CreateBulk(builders ...*TodoReminderCreate) *TodoReminderCreateBulk {
	return &TodoReminderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TodoReminderClient) MapCreateBulk(slice any, setFunc func(*TodoReminderCreate, int)) *TodoReminderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TodoReminderCreateBulk{err: fmt.Errorf("calling to TodoReminderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TodoReminderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TodoReminderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TodoReminder.
func (c *TodoReminderClient) Update() *TodoReminderUpdate {
	mutation := newTodoReminderMutation(c.config, OpUpdate)
	return &TodoReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodoReminderClient) UpdateOne(_m *TodoReminder) *TodoReminderUpdateOne {
	mutation := newTodoReminderMutation(c.config, OpUpdateOne)
	mutation.todo = &_m.TodoID
	mutation.reminder = &_m.ReminderID
	return &TodoReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TodoReminder.
func (c *TodoReminderClient) Delete() *TodoReminderDelete {
	mutation := newTodoReminderMutation(c.config, OpDelete)
	return &TodoReminderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for TodoReminder.
func (c *TodoReminderClient) Query() *TodoReminderQuery {
	return &TodoReminderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTodoReminder},
		inters: c.Interceptors(),
	}
}

// QueryTodo queries the todo edge of a TodoReminder.
func (c *TodoReminderClient) QueryTodo(_m *TodoReminder) *TodoQuery {
	return c.Query().
		Where(todoreminder.TodoID(_m.TodoID), todoreminder.ReminderID(_m.ReminderID)).
		QueryTodo()
}

// QueryReminder queries the reminder edge of a TodoReminder.
func (c *TodoReminderClient) QueryReminder(_m *TodoReminder) *ReminderQuery {
	return c.Query().
		Where(todoreminder.TodoID(_m.TodoID), todoreminder.ReminderID(_m.ReminderID)).
		QueryReminder()
}

// Hooks returns the client hooks.
func (c *TodoReminderClient) Hooks() []Hook {
	return c.hooks.TodoReminder
}

// Interceptors returns the client interceptors.
func (c *TodoReminderClient) Interceptors() []Interceptor {
	return c.inters.TodoReminder
}

func (c *TodoReminderClient) mutate(ctx context.Context, m *TodoReminderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TodoReminderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TodoReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TodoReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TodoReminderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TodoReminder mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTodos queries the todos edge of a User.
func (c *UserClient) QueryTodos(_m *User) *TodoQuery {
	query := (&TodoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TodosTable, user.TodosColumn),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.Todo
		step.Edge.Schema = schemaConfig.Todo
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModeratorUsers queries the moderator_users edge of a User.
func (c *UserClient) QueryModeratorUsers(_m *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.ModeratorUsersTable, user.ModeratorUsersPrimaryKey...),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserModerators
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModerators queries the moderators edge of a User.
func (c *UserClient) QueryModerators(_m *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ModeratorsTable, user.ModeratorsPrimaryKey...),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Moderator
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeoplePartnerUsers queries the people_partner_users edge of a User.
func (c *UserClient) QueryPeoplePartnerUsers(_m *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.PeoplePartnerUsersTable, user.PeoplePartnerUsersPrimaryKey...),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserPeoplePartner
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeoplePartner queries the people_partner edge of a User.
func (c *UserClient) QueryPeoplePartner(_m *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PeoplePartnerTable, user.PeoplePartnerPrimaryKey...),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PeoplePartner
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModerator queries the moderator edge of a User.
func (c *UserClient) QueryModerator(_m *User) *ModeratorQuery {
	query := (&ModeratorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(moderator.Table, moderator.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ModeratorTable, user.ModeratorColumn),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.Moderator
		step.Edge.Schema = schemaConfig.Moderator
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPeoplePartners queries the people_partners edge of a User.
func (c *UserClient) QueryPeoplePartners(_m *User) *PeoplePartnerQuery {
	query := (&PeoplePartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(peoplepartner.Table, peoplepartner.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.PeoplePartnersTable, user.PeoplePartnersColumn),
		)
		schemaConfig := _m.schemaConfig
		step.To.Schema = schemaConfig.PeoplePartner
		step.Edge.Schema = schemaConfig.PeoplePartner
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Moderator, PeoplePartner, Reminder, Todo, TodoReminder, User []ent.Hook
	}
	inters struct {
		Moderator, PeoplePartner, Reminder, Todo, TodoReminder, User []ent.Interceptor
	}
)

var (
	// DefaultSchemaConfig represents the default schema names for all tables as defined in ent/schema.
	DefaultSchemaConfig = SchemaConfig{
		Moderator:     tableSchemas[1],
		PeoplePartner: tableSchemas[1],
		Reminder:      tableSchemas[0],
		Todo:          tableSchemas[0],
		TodoReminder:  tableSchemas[0],
		User:          tableSchemas[1],
	}
	tableSchemas = [...]string{"todo", "user"}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
