// Code generated by ent, DO NOT EDIT.

package ent

import (
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TodoToTodoGroupAssociation is the model entity for the TodoToTodoGroupAssociation schema.
type TodoToTodoGroupAssociation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TodoID holds the value of the "todo_id" field.
	TodoID int `json:"todo_id,omitempty"`
	// TodoGroupReallyReallyLongIdentifier holds the value of the "todo_group_really_really_long_identifier" field.
	TodoGroupReallyReallyLongIdentifier int `json:"todo_group_really_really_long_identifier,omitempty"`
	// AssigneeID holds the value of the "assignee_id" field.
	AssigneeID int `json:"assignee_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoToTodoGroupAssociationQuery when eager-loading is set.
	Edges        TodoToTodoGroupAssociationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TodoToTodoGroupAssociationEdges holds the relations/edges for other nodes in the graph.
type TodoToTodoGroupAssociationEdges struct {
	// Todo holds the value of the todo edge.
	Todo *Todo `json:"todo,omitempty"`
	// TodoGroup holds the value of the todo_group edge.
	TodoGroup *TodoGroup `json:"todo_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TodoOrErr returns the Todo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoToTodoGroupAssociationEdges) TodoOrErr() (*Todo, error) {
	if e.Todo != nil {
		return e.Todo, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: todo.Label}
	}
	return nil, &NotLoadedError{edge: "todo"}
}

// TodoGroupOrErr returns the TodoGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoToTodoGroupAssociationEdges) TodoGroupOrErr() (*TodoGroup, error) {
	if e.TodoGroup != nil {
		return e.TodoGroup, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: todogroup.Label}
	}
	return nil, &NotLoadedError{edge: "todo_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoToTodoGroupAssociation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todototodogroupassociation.FieldID, todototodogroupassociation.FieldTodoID, todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier, todototodogroupassociation.FieldAssigneeID:
			values[i] = new(sql.NullInt64)
		case todototodogroupassociation.FieldCreatedAt, todototodogroupassociation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoToTodoGroupAssociation fields.
func (_m *TodoToTodoGroupAssociation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todototodogroupassociation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case todototodogroupassociation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case todototodogroupassociation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case todototodogroupassociation.FieldTodoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field todo_id", values[i])
			} else if value.Valid {
				_m.TodoID = int(value.Int64)
			}
		case todototodogroupassociation.FieldTodoGroupReallyReallyLongIdentifier:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field todo_group_really_really_long_identifier", values[i])
			} else if value.Valid {
				_m.TodoGroupReallyReallyLongIdentifier = int(value.Int64)
			}
		case todototodogroupassociation.FieldAssigneeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assignee_id", values[i])
			} else if value.Valid {
				_m.AssigneeID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoToTodoGroupAssociation.
// This includes values selected through modifiers, order, etc.
func (_m *TodoToTodoGroupAssociation) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTodo queries the "todo" edge of the TodoToTodoGroupAssociation entity.
func (_m *TodoToTodoGroupAssociation) QueryTodo() *TodoQuery {
	return NewTodoToTodoGroupAssociationClient(_m.config).QueryTodo(_m)
}

// QueryTodoGroup queries the "todo_group" edge of the TodoToTodoGroupAssociation entity.
func (_m *TodoToTodoGroupAssociation) QueryTodoGroup() *TodoGroupQuery {
	return NewTodoToTodoGroupAssociationClient(_m.config).QueryTodoGroup(_m)
}

// Update returns a builder for updating this TodoToTodoGroupAssociation.
// Note that you need to call TodoToTodoGroupAssociation.Unwrap() before calling this method if this TodoToTodoGroupAssociation
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TodoToTodoGroupAssociation) Update() *TodoToTodoGroupAssociationUpdateOne {
	return NewTodoToTodoGroupAssociationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TodoToTodoGroupAssociation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TodoToTodoGroupAssociation) Unwrap() *TodoToTodoGroupAssociation {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoToTodoGroupAssociation is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TodoToTodoGroupAssociation) String() string {
	var builder strings.Builder
	builder.WriteString("TodoToTodoGroupAssociation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("todo_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TodoID))
	builder.WriteString(", ")
	builder.WriteString("todo_group_really_really_long_identifier=")
	builder.WriteString(fmt.Sprintf("%v", _m.TodoGroupReallyReallyLongIdentifier))
	builder.WriteString(", ")
	builder.WriteString("assignee_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.AssigneeID))
	builder.WriteByte(')')
	return builder.String()
}

// TodoToTodoGroupAssociations is a parsable slice of TodoToTodoGroupAssociation.
type TodoToTodoGroupAssociations []*TodoToTodoGroupAssociation
