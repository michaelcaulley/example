// Code generated by ent, DO NOT EDIT.

package todototodogroupassociation

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the todototodogroupassociation type in the database.
	Label = "todo_to_todo_group_association"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTodoID holds the string denoting the todo_id field in the database.
	FieldTodoID = "todo_id"
	// FieldTodoGroupReallyReallyLongIdentifier holds the string denoting the todo_group_really_really_long_identifier field in the database.
	FieldTodoGroupReallyReallyLongIdentifier = "todo_group_really_really_long_identifier"
	// FieldAssigneeID holds the string denoting the assignee_id field in the database.
	FieldAssigneeID = "assignee_id"
	// EdgeTodo holds the string denoting the todo edge name in mutations.
	EdgeTodo = "todo"
	// EdgeTodoGroup holds the string denoting the todo_group edge name in mutations.
	EdgeTodoGroup = "todo_group"
	// Table holds the table name of the todototodogroupassociation in the database.
	Table = "todo_to_todo_group_associations"
	// TodoTable is the table that holds the todo relation/edge.
	TodoTable = "todo_to_todo_group_associations"
	// TodoInverseTable is the table name for the Todo entity.
	// It exists in this package in order to avoid circular dependency with the "todo" package.
	TodoInverseTable = "todos"
	// TodoColumn is the table column denoting the todo relation/edge.
	TodoColumn = "todo_id"
	// TodoGroupTable is the table that holds the todo_group relation/edge.
	TodoGroupTable = "todo_to_todo_group_associations"
	// TodoGroupInverseTable is the table name for the TodoGroup entity.
	// It exists in this package in order to avoid circular dependency with the "todogroup" package.
	TodoGroupInverseTable = "todo_groups"
	// TodoGroupColumn is the table column denoting the todo_group relation/edge.
	TodoGroupColumn = "todo_group_really_really_long_identifier"
)

// Columns holds all SQL columns for todototodogroupassociation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTodoID,
	FieldTodoGroupReallyReallyLongIdentifier,
	FieldAssigneeID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "example/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// OrderOption defines the ordering options for the TodoToTodoGroupAssociation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTodoID orders the results by the todo_id field.
func ByTodoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTodoID, opts...).ToFunc()
}

// ByTodoGroupReallyReallyLongIdentifier orders the results by the todo_group_really_really_long_identifier field.
func ByTodoGroupReallyReallyLongIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTodoGroupReallyReallyLongIdentifier, opts...).ToFunc()
}

// ByAssigneeID orders the results by the assignee_id field.
func ByAssigneeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssigneeID, opts...).ToFunc()
}

// ByTodoField orders the results by todo field.
func ByTodoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTodoStep(), sql.OrderByField(field, opts...))
	}
}

// ByTodoGroupField orders the results by todo_group field.
func ByTodoGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTodoGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newTodoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TodoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TodoTable, TodoColumn),
	)
}
func newTodoGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TodoGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TodoGroupTable, TodoGroupColumn),
	)
}
