// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/predicate"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todoreminder"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	"example/internal/ent/internal"
)

// TodoReminderUpdate is the builder for updating TodoReminder entities.
type TodoReminderUpdate struct {
	config
	hooks     []Hook
	mutation  *TodoReminderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TodoReminderUpdate builder.
func (_u *TodoReminderUpdate) Where(ps ...predicate.TodoReminder) *TodoReminderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTodoID sets the "todo_id" field.
func (_u *TodoReminderUpdate) SetTodoID(v int) *TodoReminderUpdate {
	_u.mutation.SetTodoID(v)
	return _u
}

// SetNillableTodoID sets the "todo_id" field if the given value is not nil.
func (_u *TodoReminderUpdate) SetNillableTodoID(v *int) *TodoReminderUpdate {
	if v != nil {
		_u.SetTodoID(*v)
	}
	return _u
}

// SetReminderID sets the "reminder_id" field.
func (_u *TodoReminderUpdate) SetReminderID(v int) *TodoReminderUpdate {
	_u.mutation.SetReminderID(v)
	return _u
}

// SetNillableReminderID sets the "reminder_id" field if the given value is not nil.
func (_u *TodoReminderUpdate) SetNillableReminderID(v *int) *TodoReminderUpdate {
	if v != nil {
		_u.SetReminderID(*v)
	}
	return _u
}

// SetTodo sets the "todo" edge to the Todo entity.
func (_u *TodoReminderUpdate) SetTodo(v *Todo) *TodoReminderUpdate {
	return _u.SetTodoID(v.ID)
}

// SetReminder sets the "reminder" edge to the Reminder entity.
func (_u *TodoReminderUpdate) SetReminder(v *Reminder) *TodoReminderUpdate {
	return _u.SetReminderID(v.ID)
}

// Mutation returns the TodoReminderMutation object of the builder.
func (_u *TodoReminderUpdate) Mutation() *TodoReminderMutation {
	return _u.mutation
}

// ClearTodo clears the "todo" edge to the Todo entity.
func (_u *TodoReminderUpdate) ClearTodo() *TodoReminderUpdate {
	_u.mutation.ClearTodo()
	return _u
}

// ClearReminder clears the "reminder" edge to the Reminder entity.
func (_u *TodoReminderUpdate) ClearReminder() *TodoReminderUpdate {
	_u.mutation.ClearReminder()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TodoReminderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TodoReminderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TodoReminderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TodoReminderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TodoReminderUpdate) check() error {
	if _u.mutation.TodoCleared() && len(_u.mutation.TodoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TodoReminder.todo"`)
	}
	if _u.mutation.ReminderCleared() && len(_u.mutation.ReminderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TodoReminder.reminder"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TodoReminderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TodoReminderUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TodoReminderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(todoreminder.Table, todoreminder.Columns, sqlgraph.NewFieldSpec(todoreminder.FieldTodoID, field.TypeInt), sqlgraph.NewFieldSpec(todoreminder.FieldReminderID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.TodoTable,
			Columns: []string{todoreminder.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.TodoTable,
			Columns: []string{todoreminder.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReminderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.ReminderTable,
			Columns: []string{todoreminder.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReminderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.ReminderTable,
			Columns: []string{todoreminder.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TodoReminder
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoreminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TodoReminderUpdateOne is the builder for updating a single TodoReminder entity.
type TodoReminderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TodoReminderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTodoID sets the "todo_id" field.
func (_u *TodoReminderUpdateOne) SetTodoID(v int) *TodoReminderUpdateOne {
	_u.mutation.SetTodoID(v)
	return _u
}

// SetNillableTodoID sets the "todo_id" field if the given value is not nil.
func (_u *TodoReminderUpdateOne) SetNillableTodoID(v *int) *TodoReminderUpdateOne {
	if v != nil {
		_u.SetTodoID(*v)
	}
	return _u
}

// SetReminderID sets the "reminder_id" field.
func (_u *TodoReminderUpdateOne) SetReminderID(v int) *TodoReminderUpdateOne {
	_u.mutation.SetReminderID(v)
	return _u
}

// SetNillableReminderID sets the "reminder_id" field if the given value is not nil.
func (_u *TodoReminderUpdateOne) SetNillableReminderID(v *int) *TodoReminderUpdateOne {
	if v != nil {
		_u.SetReminderID(*v)
	}
	return _u
}

// SetTodo sets the "todo" edge to the Todo entity.
func (_u *TodoReminderUpdateOne) SetTodo(v *Todo) *TodoReminderUpdateOne {
	return _u.SetTodoID(v.ID)
}

// SetReminder sets the "reminder" edge to the Reminder entity.
func (_u *TodoReminderUpdateOne) SetReminder(v *Reminder) *TodoReminderUpdateOne {
	return _u.SetReminderID(v.ID)
}

// Mutation returns the TodoReminderMutation object of the builder.
func (_u *TodoReminderUpdateOne) Mutation() *TodoReminderMutation {
	return _u.mutation
}

// ClearTodo clears the "todo" edge to the Todo entity.
func (_u *TodoReminderUpdateOne) ClearTodo() *TodoReminderUpdateOne {
	_u.mutation.ClearTodo()
	return _u
}

// ClearReminder clears the "reminder" edge to the Reminder entity.
func (_u *TodoReminderUpdateOne) ClearReminder() *TodoReminderUpdateOne {
	_u.mutation.ClearReminder()
	return _u
}

// Where appends a list predicates to the TodoReminderUpdate builder.
func (_u *TodoReminderUpdateOne) Where(ps ...predicate.TodoReminder) *TodoReminderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TodoReminderUpdateOne) Select(field string, fields ...string) *TodoReminderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TodoReminder entity.
func (_u *TodoReminderUpdateOne) Save(ctx context.Context) (*TodoReminder, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TodoReminderUpdateOne) SaveX(ctx context.Context) *TodoReminder {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TodoReminderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TodoReminderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TodoReminderUpdateOne) check() error {
	if _u.mutation.TodoCleared() && len(_u.mutation.TodoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TodoReminder.todo"`)
	}
	if _u.mutation.ReminderCleared() && len(_u.mutation.ReminderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TodoReminder.reminder"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TodoReminderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TodoReminderUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TodoReminderUpdateOne) sqlSave(ctx context.Context) (_node *TodoReminder, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(todoreminder.Table, todoreminder.Columns, sqlgraph.NewFieldSpec(todoreminder.FieldTodoID, field.TypeInt), sqlgraph.NewFieldSpec(todoreminder.FieldReminderID, field.TypeInt))
	if id, ok := _u.mutation.TodoID(); !ok {
		return nil, &ValidationError{Name: "todo_id", err: errors.New(`ent: missing "TodoReminder.todo_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := _u.mutation.ReminderID(); !ok {
		return nil, &ValidationError{Name: "reminder_id", err: errors.New(`ent: missing "TodoReminder.reminder_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !todoreminder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.TodoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.TodoTable,
			Columns: []string{todoreminder.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TodoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.TodoTable,
			Columns: []string{todoreminder.TodoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ReminderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.ReminderTable,
			Columns: []string{todoreminder.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ReminderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   todoreminder.ReminderTable,
			Columns: []string{todoreminder.ReminderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reminder.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _u.schemaConfig.TodoReminder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TodoReminder
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TodoReminder{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoreminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
