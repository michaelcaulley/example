// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"example/internal/ent/reminder"
	"example/internal/ent/schema"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	reminderMixin := schema.Reminder{}.Mixin()
	reminderMixinHooks0 := reminderMixin[0].Hooks()
	reminder.Hooks[0] = reminderMixinHooks0[0]
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescText is the schema descriptor for text field.
	todoDescText := todoFields[0].Descriptor()
	// todo.TextValidator is a validator for the "text" field. It is called by the builders before save.
	todo.TextValidator = func() func(string) error {
		validators := todoDescText.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(text string) error {
			for _, fn := range fns {
				if err := fn(text); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	todogroupMixin := schema.TodoGroup{}.Mixin()
	todogroupMixinHooks0 := todogroupMixin[0].Hooks()
	todogroup.Hooks[0] = todogroupMixinHooks0[0]
	todogroupFields := schema.TodoGroup{}.Fields()
	_ = todogroupFields
	// todogroupDescName is the schema descriptor for name field.
	todogroupDescName := todogroupFields[0].Descriptor()
	// todogroup.NameValidator is a validator for the "name" field. It is called by the builders before save.
	todogroup.NameValidator = func() func(string) error {
		validators := todogroupDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	todototodogroupassociationMixin := schema.TodoToTodoGroupAssociation{}.Mixin()
	todototodogroupassociationMixinHooks0 := todototodogroupassociationMixin[0].Hooks()
	todototodogroupassociation.Hooks[0] = todototodogroupassociationMixinHooks0[0]
}

const (
	Version = "v0.14.4" // Version of ent codegen.
)
