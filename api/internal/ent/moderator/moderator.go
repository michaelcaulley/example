// Code generated by ent, DO NOT EDIT.

package moderator

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the moderator type in the database.
	Label = "moderator"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldModeratorUserID holds the string denoting the moderator_user_id field in the database.
	FieldModeratorUserID = "moderator_user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeModerator holds the string denoting the moderator edge name in mutations.
	EdgeModerator = "moderator"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// Table holds the table name of the moderator in the database.
	Table = "moderators"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "moderators"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ModeratorTable is the table that holds the moderator relation/edge.
	ModeratorTable = "moderators"
	// ModeratorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ModeratorInverseTable = "users"
	// ModeratorColumn is the table column denoting the moderator relation/edge.
	ModeratorColumn = "moderator_user_id"
)

// Columns holds all SQL columns for moderator fields.
var Columns = []string{
	FieldUserID,
	FieldModeratorUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Moderator queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByModeratorUserID orders the results by the moderator_user_id field.
func ByModeratorUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModeratorUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByModeratorField orders the results by moderator field.
func ByModeratorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModeratorStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newModeratorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ModeratorColumn),
		sqlgraph.To(ModeratorInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ModeratorTable, ModeratorColumn),
	)
}
