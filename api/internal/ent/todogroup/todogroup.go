// Code generated by ent, DO NOT EDIT.

package todogroup

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the todogroup type in the database.
	Label = "todo_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTodos holds the string denoting the todos edge name in mutations.
	EdgeTodos = "todos"
	// EdgeGroupedTodos holds the string denoting the grouped_todos edge name in mutations.
	EdgeGroupedTodos = "grouped_todos"
	// Table holds the table name of the todogroup in the database.
	Table = "todo_groups"
	// TodosTable is the table that holds the todos relation/edge. The primary key declared below.
	TodosTable = "todo_to_todo_group_associations"
	// TodosInverseTable is the table name for the Todo entity.
	// It exists in this package in order to avoid circular dependency with the "todo" package.
	TodosInverseTable = "todos"
	// GroupedTodosTable is the table that holds the grouped_todos relation/edge.
	GroupedTodosTable = "todo_to_todo_group_associations"
	// GroupedTodosInverseTable is the table name for the TodoToTodoGroupAssociation entity.
	// It exists in this package in order to avoid circular dependency with the "todototodogroupassociation" package.
	GroupedTodosInverseTable = "todo_to_todo_group_associations"
	// GroupedTodosColumn is the table column denoting the grouped_todos relation/edge.
	GroupedTodosColumn = "todo_group_really_really_long_identifier"
)

// Columns holds all SQL columns for todogroup fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
}

var (
	// TodosPrimaryKey and TodosColumn2 are the table columns denoting the
	// primary key for the todos relation (M2M).
	TodosPrimaryKey = []string{"todo_group_really_really_long_identifier", "todo_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "example/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the TodoGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTodosCount orders the results by todos count.
func ByTodosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTodosStep(), opts...)
	}
}

// ByTodos orders the results by todos terms.
func ByTodos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTodosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupedTodosCount orders the results by grouped_todos count.
func ByGroupedTodosCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupedTodosStep(), opts...)
	}
}

// ByGroupedTodos orders the results by grouped_todos terms.
func ByGroupedTodos(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupedTodosStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTodosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TodosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TodosTable, TodosPrimaryKey...),
	)
}
func newGroupedTodosStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupedTodosInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GroupedTodosTable, GroupedTodosColumn),
	)
}
