// Code generated by ent, DO NOT EDIT.

package todoreminder

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the todoreminder type in the database.
	Label = "todo_reminder"
	// FieldTodoID holds the string denoting the todo_id field in the database.
	FieldTodoID = "todo_id"
	// FieldReminderID holds the string denoting the reminder_id field in the database.
	FieldReminderID = "reminder_id"
	// EdgeTodo holds the string denoting the todo edge name in mutations.
	EdgeTodo = "todo"
	// EdgeReminder holds the string denoting the reminder edge name in mutations.
	EdgeReminder = "reminder"
	// TodoFieldID holds the string denoting the ID field of the Todo.
	TodoFieldID = "id"
	// ReminderFieldID holds the string denoting the ID field of the Reminder.
	ReminderFieldID = "id"
	// Table holds the table name of the todoreminder in the database.
	Table = "todo_reminders"
	// TodoTable is the table that holds the todo relation/edge.
	TodoTable = "todo_reminders"
	// TodoInverseTable is the table name for the Todo entity.
	// It exists in this package in order to avoid circular dependency with the "todo" package.
	TodoInverseTable = "todos"
	// TodoColumn is the table column denoting the todo relation/edge.
	TodoColumn = "todo_id"
	// ReminderTable is the table that holds the reminder relation/edge.
	ReminderTable = "todo_reminders"
	// ReminderInverseTable is the table name for the Reminder entity.
	// It exists in this package in order to avoid circular dependency with the "reminder" package.
	ReminderInverseTable = "reminders"
	// ReminderColumn is the table column denoting the reminder relation/edge.
	ReminderColumn = "reminder_id"
)

// Columns holds all SQL columns for todoreminder fields.
var Columns = []string{
	FieldTodoID,
	FieldReminderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TodoReminder queries.
type OrderOption func(*sql.Selector)

// ByTodoID orders the results by the todo_id field.
func ByTodoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTodoID, opts...).ToFunc()
}

// ByReminderID orders the results by the reminder_id field.
func ByReminderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReminderID, opts...).ToFunc()
}

// ByTodoField orders the results by todo field.
func ByTodoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTodoStep(), sql.OrderByField(field, opts...))
	}
}

// ByReminderField orders the results by reminder field.
func ByReminderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReminderStep(), sql.OrderByField(field, opts...))
	}
}
func newTodoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TodoColumn),
		sqlgraph.To(TodoInverseTable, TodoFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TodoTable, TodoColumn),
	)
}
func newReminderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ReminderColumn),
		sqlgraph.To(ReminderInverseTable, ReminderFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ReminderTable, ReminderColumn),
	)
}
