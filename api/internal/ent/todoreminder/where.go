// Code generated by ent, DO NOT EDIT.

package todoreminder

import (
	"example/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// TodoID applies equality check predicate on the "todo_id" field. It's identical to TodoIDEQ.
func TodoID(v int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldEQ(FieldTodoID, v))
}

// ReminderID applies equality check predicate on the "reminder_id" field. It's identical to ReminderIDEQ.
func ReminderID(v int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldEQ(FieldReminderID, v))
}

// TodoIDEQ applies the EQ predicate on the "todo_id" field.
func TodoIDEQ(v int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldEQ(FieldTodoID, v))
}

// TodoIDNEQ applies the NEQ predicate on the "todo_id" field.
func TodoIDNEQ(v int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldNEQ(FieldTodoID, v))
}

// TodoIDIn applies the In predicate on the "todo_id" field.
func TodoIDIn(vs ...int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldIn(FieldTodoID, vs...))
}

// TodoIDNotIn applies the NotIn predicate on the "todo_id" field.
func TodoIDNotIn(vs ...int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldNotIn(FieldTodoID, vs...))
}

// ReminderIDEQ applies the EQ predicate on the "reminder_id" field.
func ReminderIDEQ(v int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldEQ(FieldReminderID, v))
}

// ReminderIDNEQ applies the NEQ predicate on the "reminder_id" field.
func ReminderIDNEQ(v int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldNEQ(FieldReminderID, v))
}

// ReminderIDIn applies the In predicate on the "reminder_id" field.
func ReminderIDIn(vs ...int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldIn(FieldReminderID, vs...))
}

// ReminderIDNotIn applies the NotIn predicate on the "reminder_id" field.
func ReminderIDNotIn(vs ...int) predicate.TodoReminder {
	return predicate.TodoReminder(sql.FieldNotIn(FieldReminderID, vs...))
}

// HasTodo applies the HasEdge predicate on the "todo" edge.
func HasTodo() predicate.TodoReminder {
	return predicate.TodoReminder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TodoColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TodoTable, TodoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodoWith applies the HasEdge predicate on the "todo" edge with a given conditions (other predicates).
func HasTodoWith(preds ...predicate.Todo) predicate.TodoReminder {
	return predicate.TodoReminder(func(s *sql.Selector) {
		step := newTodoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReminder applies the HasEdge predicate on the "reminder" edge.
func HasReminder() predicate.TodoReminder {
	return predicate.TodoReminder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ReminderColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ReminderTable, ReminderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReminderWith applies the HasEdge predicate on the "reminder" edge with a given conditions (other predicates).
func HasReminderWith(preds ...predicate.Reminder) predicate.TodoReminder {
	return predicate.TodoReminder(func(s *sql.Selector) {
		step := newReminderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TodoReminder) predicate.TodoReminder {
	return predicate.TodoReminder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TodoReminder) predicate.TodoReminder {
	return predicate.TodoReminder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TodoReminder) predicate.TodoReminder {
	return predicate.TodoReminder(sql.NotPredicates(p))
}
