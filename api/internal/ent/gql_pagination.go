// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"example/internal/ent/reminder"
	"example/internal/ent/todo"
	"example/internal/ent/todogroup"
	"example/internal/ent/todototodogroupassociation"
	"example/internal/ent/user"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ReminderEdge is the edge representation of Reminder.
type ReminderEdge struct {
	Node   *Reminder `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ReminderConnection is the connection containing edges to Reminder.
type ReminderConnection struct {
	Edges      []*ReminderEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ReminderConnection) build(nodes []*Reminder, pager *reminderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Reminder
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Reminder {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Reminder {
			return nodes[i]
		}
	}
	c.Edges = make([]*ReminderEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ReminderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ReminderPaginateOption enables pagination customization.
type ReminderPaginateOption func(*reminderPager) error

// WithReminderOrder configures pagination ordering.
func WithReminderOrder(order *ReminderOrder) ReminderPaginateOption {
	if order == nil {
		order = DefaultReminderOrder
	}
	o := *order
	return func(pager *reminderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultReminderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithReminderFilter configures pagination filter.
func WithReminderFilter(filter func(*ReminderQuery) (*ReminderQuery, error)) ReminderPaginateOption {
	return func(pager *reminderPager) error {
		if filter == nil {
			return errors.New("ReminderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type reminderPager struct {
	reverse bool
	order   *ReminderOrder
	filter  func(*ReminderQuery) (*ReminderQuery, error)
}

func newReminderPager(opts []ReminderPaginateOption, reverse bool) (*reminderPager, error) {
	pager := &reminderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultReminderOrder
	}
	return pager, nil
}

func (p *reminderPager) applyFilter(query *ReminderQuery) (*ReminderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *reminderPager) toCursor(_m *Reminder) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *reminderPager) applyCursors(query *ReminderQuery, after, before *Cursor) (*ReminderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultReminderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *reminderPager) applyOrder(query *ReminderQuery) *ReminderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultReminderOrder.Field {
		query = query.Order(DefaultReminderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *reminderPager) orderExpr(query *ReminderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultReminderOrder.Field {
			b.Comma().Ident(DefaultReminderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Reminder.
func (_m *ReminderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ReminderPaginateOption,
) (*ReminderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newReminderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &ReminderConnection{Edges: []*ReminderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ReminderOrderFieldCreatedAt orders Reminder by created_at.
	ReminderOrderFieldCreatedAt = &ReminderOrderField{
		Value: func(_m *Reminder) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: reminder.FieldCreatedAt,
		toTerm: reminder.ByCreatedAt,
		toCursor: func(_m *Reminder) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// ReminderOrderFieldUpdatedAt orders Reminder by updated_at.
	ReminderOrderFieldUpdatedAt = &ReminderOrderField{
		Value: func(_m *Reminder) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: reminder.FieldUpdatedAt,
		toTerm: reminder.ByUpdatedAt,
		toCursor: func(_m *Reminder) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ReminderOrderField) String() string {
	var str string
	switch f.column {
	case ReminderOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case ReminderOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ReminderOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ReminderOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ReminderOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ReminderOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *ReminderOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid ReminderOrderField", str)
	}
	return nil
}

// ReminderOrderField defines the ordering field of Reminder.
type ReminderOrderField struct {
	// Value extracts the ordering value from the given Reminder.
	Value    func(*Reminder) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) reminder.OrderOption
	toCursor func(*Reminder) Cursor
}

// ReminderOrder defines the ordering of Reminder.
type ReminderOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ReminderOrderField `json:"field"`
}

// DefaultReminderOrder is the default ordering of Reminder.
var DefaultReminderOrder = &ReminderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ReminderOrderField{
		Value: func(_m *Reminder) (ent.Value, error) {
			return _m.ID, nil
		},
		column: reminder.FieldID,
		toTerm: reminder.ByID,
		toCursor: func(_m *Reminder) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Reminder into ReminderEdge.
func (_m *Reminder) ToEdge(order *ReminderOrder) *ReminderEdge {
	if order == nil {
		order = DefaultReminderOrder
	}
	return &ReminderEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TodoEdge is the edge representation of Todo.
type TodoEdge struct {
	Node   *Todo  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TodoConnection is the connection containing edges to Todo.
type TodoConnection struct {
	Edges      []*TodoEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *TodoConnection) build(nodes []*Todo, pager *todoPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Todo
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Todo {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Todo {
			return nodes[i]
		}
	}
	c.Edges = make([]*TodoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TodoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TodoPaginateOption enables pagination customization.
type TodoPaginateOption func(*todoPager) error

// WithTodoOrder configures pagination ordering.
func WithTodoOrder(order *TodoOrder) TodoPaginateOption {
	if order == nil {
		order = DefaultTodoOrder
	}
	o := *order
	return func(pager *todoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTodoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTodoFilter configures pagination filter.
func WithTodoFilter(filter func(*TodoQuery) (*TodoQuery, error)) TodoPaginateOption {
	return func(pager *todoPager) error {
		if filter == nil {
			return errors.New("TodoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type todoPager struct {
	reverse bool
	order   *TodoOrder
	filter  func(*TodoQuery) (*TodoQuery, error)
}

func newTodoPager(opts []TodoPaginateOption, reverse bool) (*todoPager, error) {
	pager := &todoPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTodoOrder
	}
	return pager, nil
}

func (p *todoPager) applyFilter(query *TodoQuery) (*TodoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *todoPager) toCursor(_m *Todo) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *todoPager) applyCursors(query *TodoQuery, after, before *Cursor) (*TodoQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTodoOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *todoPager) applyOrder(query *TodoQuery) *TodoQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTodoOrder.Field {
		query = query.Order(DefaultTodoOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *todoPager) orderExpr(query *TodoQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTodoOrder.Field {
			b.Comma().Ident(DefaultTodoOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Todo.
func (_m *TodoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TodoPaginateOption,
) (*TodoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTodoPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TodoConnection{Edges: []*TodoEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TodoOrderField defines the ordering field of Todo.
type TodoOrderField struct {
	// Value extracts the ordering value from the given Todo.
	Value    func(*Todo) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) todo.OrderOption
	toCursor func(*Todo) Cursor
}

// TodoOrder defines the ordering of Todo.
type TodoOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TodoOrderField `json:"field"`
}

// DefaultTodoOrder is the default ordering of Todo.
var DefaultTodoOrder = &TodoOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TodoOrderField{
		Value: func(_m *Todo) (ent.Value, error) {
			return _m.ID, nil
		},
		column: todo.FieldID,
		toTerm: todo.ByID,
		toCursor: func(_m *Todo) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Todo into TodoEdge.
func (_m *Todo) ToEdge(order *TodoOrder) *TodoEdge {
	if order == nil {
		order = DefaultTodoOrder
	}
	return &TodoEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TodoGroupEdge is the edge representation of TodoGroup.
type TodoGroupEdge struct {
	Node   *TodoGroup `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// TodoGroupConnection is the connection containing edges to TodoGroup.
type TodoGroupConnection struct {
	Edges      []*TodoGroupEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *TodoGroupConnection) build(nodes []*TodoGroup, pager *todogroupPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TodoGroup
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TodoGroup {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TodoGroup {
			return nodes[i]
		}
	}
	c.Edges = make([]*TodoGroupEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TodoGroupEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TodoGroupPaginateOption enables pagination customization.
type TodoGroupPaginateOption func(*todogroupPager) error

// WithTodoGroupOrder configures pagination ordering.
func WithTodoGroupOrder(order *TodoGroupOrder) TodoGroupPaginateOption {
	if order == nil {
		order = DefaultTodoGroupOrder
	}
	o := *order
	return func(pager *todogroupPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTodoGroupOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTodoGroupFilter configures pagination filter.
func WithTodoGroupFilter(filter func(*TodoGroupQuery) (*TodoGroupQuery, error)) TodoGroupPaginateOption {
	return func(pager *todogroupPager) error {
		if filter == nil {
			return errors.New("TodoGroupQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type todogroupPager struct {
	reverse bool
	order   *TodoGroupOrder
	filter  func(*TodoGroupQuery) (*TodoGroupQuery, error)
}

func newTodoGroupPager(opts []TodoGroupPaginateOption, reverse bool) (*todogroupPager, error) {
	pager := &todogroupPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTodoGroupOrder
	}
	return pager, nil
}

func (p *todogroupPager) applyFilter(query *TodoGroupQuery) (*TodoGroupQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *todogroupPager) toCursor(_m *TodoGroup) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *todogroupPager) applyCursors(query *TodoGroupQuery, after, before *Cursor) (*TodoGroupQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTodoGroupOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *todogroupPager) applyOrder(query *TodoGroupQuery) *TodoGroupQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTodoGroupOrder.Field {
		query = query.Order(DefaultTodoGroupOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *todogroupPager) orderExpr(query *TodoGroupQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTodoGroupOrder.Field {
			b.Comma().Ident(DefaultTodoGroupOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TodoGroup.
func (_m *TodoGroupQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TodoGroupPaginateOption,
) (*TodoGroupConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTodoGroupPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TodoGroupConnection{Edges: []*TodoGroupEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TodoGroupOrderFieldCreatedAt orders TodoGroup by created_at.
	TodoGroupOrderFieldCreatedAt = &TodoGroupOrderField{
		Value: func(_m *TodoGroup) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: todogroup.FieldCreatedAt,
		toTerm: todogroup.ByCreatedAt,
		toCursor: func(_m *TodoGroup) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// TodoGroupOrderFieldUpdatedAt orders TodoGroup by updated_at.
	TodoGroupOrderFieldUpdatedAt = &TodoGroupOrderField{
		Value: func(_m *TodoGroup) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: todogroup.FieldUpdatedAt,
		toTerm: todogroup.ByUpdatedAt,
		toCursor: func(_m *TodoGroup) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TodoGroupOrderField) String() string {
	var str string
	switch f.column {
	case TodoGroupOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TodoGroupOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TodoGroupOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TodoGroupOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TodoGroupOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TodoGroupOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TodoGroupOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TodoGroupOrderField", str)
	}
	return nil
}

// TodoGroupOrderField defines the ordering field of TodoGroup.
type TodoGroupOrderField struct {
	// Value extracts the ordering value from the given TodoGroup.
	Value    func(*TodoGroup) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) todogroup.OrderOption
	toCursor func(*TodoGroup) Cursor
}

// TodoGroupOrder defines the ordering of TodoGroup.
type TodoGroupOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *TodoGroupOrderField `json:"field"`
}

// DefaultTodoGroupOrder is the default ordering of TodoGroup.
var DefaultTodoGroupOrder = &TodoGroupOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TodoGroupOrderField{
		Value: func(_m *TodoGroup) (ent.Value, error) {
			return _m.ID, nil
		},
		column: todogroup.FieldID,
		toTerm: todogroup.ByID,
		toCursor: func(_m *TodoGroup) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts TodoGroup into TodoGroupEdge.
func (_m *TodoGroup) ToEdge(order *TodoGroupOrder) *TodoGroupEdge {
	if order == nil {
		order = DefaultTodoGroupOrder
	}
	return &TodoGroupEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TodoToTodoGroupAssociationEdge is the edge representation of TodoToTodoGroupAssociation.
type TodoToTodoGroupAssociationEdge struct {
	Node   *TodoToTodoGroupAssociation `json:"node"`
	Cursor Cursor                      `json:"cursor"`
}

// TodoToTodoGroupAssociationConnection is the connection containing edges to TodoToTodoGroupAssociation.
type TodoToTodoGroupAssociationConnection struct {
	Edges      []*TodoToTodoGroupAssociationEdge `json:"edges"`
	PageInfo   PageInfo                          `json:"pageInfo"`
	TotalCount int                               `json:"totalCount"`
}

func (c *TodoToTodoGroupAssociationConnection) build(nodes []*TodoToTodoGroupAssociation, pager *todototodogroupassociationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TodoToTodoGroupAssociation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TodoToTodoGroupAssociation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TodoToTodoGroupAssociation {
			return nodes[i]
		}
	}
	c.Edges = make([]*TodoToTodoGroupAssociationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TodoToTodoGroupAssociationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TodoToTodoGroupAssociationPaginateOption enables pagination customization.
type TodoToTodoGroupAssociationPaginateOption func(*todototodogroupassociationPager) error

// WithTodoToTodoGroupAssociationOrder configures pagination ordering.
func WithTodoToTodoGroupAssociationOrder(order *TodoToTodoGroupAssociationOrder) TodoToTodoGroupAssociationPaginateOption {
	if order == nil {
		order = DefaultTodoToTodoGroupAssociationOrder
	}
	o := *order
	return func(pager *todototodogroupassociationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTodoToTodoGroupAssociationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTodoToTodoGroupAssociationFilter configures pagination filter.
func WithTodoToTodoGroupAssociationFilter(filter func(*TodoToTodoGroupAssociationQuery) (*TodoToTodoGroupAssociationQuery, error)) TodoToTodoGroupAssociationPaginateOption {
	return func(pager *todototodogroupassociationPager) error {
		if filter == nil {
			return errors.New("TodoToTodoGroupAssociationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type todototodogroupassociationPager struct {
	reverse bool
	order   *TodoToTodoGroupAssociationOrder
	filter  func(*TodoToTodoGroupAssociationQuery) (*TodoToTodoGroupAssociationQuery, error)
}

func newTodoToTodoGroupAssociationPager(opts []TodoToTodoGroupAssociationPaginateOption, reverse bool) (*todototodogroupassociationPager, error) {
	pager := &todototodogroupassociationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTodoToTodoGroupAssociationOrder
	}
	return pager, nil
}

func (p *todototodogroupassociationPager) applyFilter(query *TodoToTodoGroupAssociationQuery) (*TodoToTodoGroupAssociationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *todototodogroupassociationPager) toCursor(_m *TodoToTodoGroupAssociation) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *todototodogroupassociationPager) applyCursors(query *TodoToTodoGroupAssociationQuery, after, before *Cursor) (*TodoToTodoGroupAssociationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTodoToTodoGroupAssociationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *todototodogroupassociationPager) applyOrder(query *TodoToTodoGroupAssociationQuery) *TodoToTodoGroupAssociationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTodoToTodoGroupAssociationOrder.Field {
		query = query.Order(DefaultTodoToTodoGroupAssociationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *todototodogroupassociationPager) orderExpr(query *TodoToTodoGroupAssociationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTodoToTodoGroupAssociationOrder.Field {
			b.Comma().Ident(DefaultTodoToTodoGroupAssociationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TodoToTodoGroupAssociation.
func (_m *TodoToTodoGroupAssociationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TodoToTodoGroupAssociationPaginateOption,
) (*TodoToTodoGroupAssociationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTodoToTodoGroupAssociationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TodoToTodoGroupAssociationConnection{Edges: []*TodoToTodoGroupAssociationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TodoToTodoGroupAssociationOrderFieldCreatedAt orders TodoToTodoGroupAssociation by created_at.
	TodoToTodoGroupAssociationOrderFieldCreatedAt = &TodoToTodoGroupAssociationOrderField{
		Value: func(_m *TodoToTodoGroupAssociation) (ent.Value, error) {
			return _m.CreatedAt, nil
		},
		column: todototodogroupassociation.FieldCreatedAt,
		toTerm: todototodogroupassociation.ByCreatedAt,
		toCursor: func(_m *TodoToTodoGroupAssociation) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CreatedAt,
			}
		},
	}
	// TodoToTodoGroupAssociationOrderFieldUpdatedAt orders TodoToTodoGroupAssociation by updated_at.
	TodoToTodoGroupAssociationOrderFieldUpdatedAt = &TodoToTodoGroupAssociationOrderField{
		Value: func(_m *TodoToTodoGroupAssociation) (ent.Value, error) {
			return _m.UpdatedAt, nil
		},
		column: todototodogroupassociation.FieldUpdatedAt,
		toTerm: todototodogroupassociation.ByUpdatedAt,
		toCursor: func(_m *TodoToTodoGroupAssociation) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TodoToTodoGroupAssociationOrderField) String() string {
	var str string
	switch f.column {
	case TodoToTodoGroupAssociationOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TodoToTodoGroupAssociationOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TodoToTodoGroupAssociationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TodoToTodoGroupAssociationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TodoToTodoGroupAssociationOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TodoToTodoGroupAssociationOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TodoToTodoGroupAssociationOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TodoToTodoGroupAssociationOrderField", str)
	}
	return nil
}

// TodoToTodoGroupAssociationOrderField defines the ordering field of TodoToTodoGroupAssociation.
type TodoToTodoGroupAssociationOrderField struct {
	// Value extracts the ordering value from the given TodoToTodoGroupAssociation.
	Value    func(*TodoToTodoGroupAssociation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) todototodogroupassociation.OrderOption
	toCursor func(*TodoToTodoGroupAssociation) Cursor
}

// TodoToTodoGroupAssociationOrder defines the ordering of TodoToTodoGroupAssociation.
type TodoToTodoGroupAssociationOrder struct {
	Direction OrderDirection                        `json:"direction"`
	Field     *TodoToTodoGroupAssociationOrderField `json:"field"`
}

// DefaultTodoToTodoGroupAssociationOrder is the default ordering of TodoToTodoGroupAssociation.
var DefaultTodoToTodoGroupAssociationOrder = &TodoToTodoGroupAssociationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TodoToTodoGroupAssociationOrderField{
		Value: func(_m *TodoToTodoGroupAssociation) (ent.Value, error) {
			return _m.ID, nil
		},
		column: todototodogroupassociation.FieldID,
		toTerm: todototodogroupassociation.ByID,
		toCursor: func(_m *TodoToTodoGroupAssociation) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts TodoToTodoGroupAssociation into TodoToTodoGroupAssociationEdge.
func (_m *TodoToTodoGroupAssociation) ToEdge(order *TodoToTodoGroupAssociationOrder) *TodoToTodoGroupAssociationEdge {
	if order == nil {
		order = DefaultTodoToTodoGroupAssociationOrder
	}
	return &TodoToTodoGroupAssociationEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(_m *User) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (_m *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(_m *User) (ent.Value, error) {
			return _m.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(_m *User) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (_m *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}
