directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateTodoGroupInput is used for create TodoGroup object.
Input was generated by ent.
"""
input CreateTodoGroupInput {
  name: String!
  todoIDs: [ID!]
}
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  text: String!
  reminderIDs: [ID!]
  groupIDs: [ID!]
}
"""
CreateTodoToTodoGroupAssociationInput is used for create TodoToTodoGroupAssociation object.
Input was generated by ent.
"""
input CreateTodoToTodoGroupAssociationInput {
  assigneeID: Int!
  todoID: ID!
  todoGroupID: ID!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  todoIDs: [ID!]
  moderatorUserIDs: [ID!]
  moderatorIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "example/internal/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
  todoGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TodoGroups returned from the connection.
    """
    orderBy: TodoGroupOrder

    """
    Filtering options for TodoGroups returned from the connection.
    """
    where: TodoGroupWhereInput
  ): TodoGroupConnection!
  todoToTodoGroupAssociations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TodoToTodoGroupAssociations returned from the connection.
    """
    orderBy: TodoToTodoGroupAssociationOrder

    """
    Filtering options for TodoToTodoGroupAssociations returned from the connection.
    """
    where: TodoToTodoGroupAssociationWhereInput
  ): TodoToTodoGroupAssociationConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
type Reminder implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  todo: [Todo!]
}
"""
Ordering options for Reminder connections
"""
input ReminderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Reminders.
  """
  field: ReminderOrderField!
}
"""
Properties by which Reminder connections can be ordered.
"""
enum ReminderOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
ReminderWhereInput is used for filtering Reminder objects.
Input was generated by ent.
"""
input ReminderWhereInput {
  not: ReminderWhereInput
  and: [ReminderWhereInput!]
  or: [ReminderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  todo edge predicates
  """
  hasTodo: Boolean
  hasTodoWith: [TodoWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
type Todo implements Node {
  id: ID!
  text: String!
  doneAt: Time
  ownerID: ID!
  owner: User!
  reminders: [Reminder!]
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TodoGroups returned from the connection.
    """
    orderBy: TodoGroupOrder

    """
    Filtering options for TodoGroups returned from the connection.
    """
    where: TodoGroupWhereInput
  ): TodoGroupConnection!
  groupedTodos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TodoToTodoGroupAssociations returned from the connection.
    """
    orderBy: TodoToTodoGroupAssociationOrder

    """
    Filtering options for TodoToTodoGroupAssociations returned from the connection.
    """
    where: TodoToTodoGroupAssociationWhereInput
  ): TodoToTodoGroupAssociationConnection!
}
"""
A connection to a list of items.
"""
type TodoConnection {
  """
  A list of edges.
  """
  edges: [TodoEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoEdge {
  """
  The item at the end of the edge.
  """
  node: Todo
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type TodoGroup implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
  groupedTodos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TodoToTodoGroupAssociations returned from the connection.
    """
    orderBy: TodoToTodoGroupAssociationOrder

    """
    Filtering options for TodoToTodoGroupAssociations returned from the connection.
    """
    where: TodoToTodoGroupAssociationWhereInput
  ): TodoToTodoGroupAssociationConnection!
}
"""
A connection to a list of items.
"""
type TodoGroupConnection {
  """
  A list of edges.
  """
  edges: [TodoGroupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoGroupEdge {
  """
  The item at the end of the edge.
  """
  node: TodoGroup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for TodoGroup connections
"""
input TodoGroupOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TodoGroups.
  """
  field: TodoGroupOrderField!
}
"""
Properties by which TodoGroup connections can be ordered.
"""
enum TodoGroupOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
TodoGroupWhereInput is used for filtering TodoGroup objects.
Input was generated by ent.
"""
input TodoGroupWhereInput {
  not: TodoGroupWhereInput
  and: [TodoGroupWhereInput!]
  or: [TodoGroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  todos edge predicates
  """
  hasTodos: Boolean
  hasTodosWith: [TodoWhereInput!]
  """
  grouped_todos edge predicates
  """
  hasGroupedTodos: Boolean
  hasGroupedTodosWith: [TodoToTodoGroupAssociationWhereInput!]
}
type TodoToTodoGroupAssociation implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  todoID: ID!
  todoGroupReallyReallyLongIdentifier: ID!
  assigneeID: Int!
  todo: Todo!
  todoGroup: TodoGroup!
}
"""
A connection to a list of items.
"""
type TodoToTodoGroupAssociationConnection {
  """
  A list of edges.
  """
  edges: [TodoToTodoGroupAssociationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoToTodoGroupAssociationEdge {
  """
  The item at the end of the edge.
  """
  node: TodoToTodoGroupAssociation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for TodoToTodoGroupAssociation connections
"""
input TodoToTodoGroupAssociationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TodoToTodoGroupAssociations.
  """
  field: TodoToTodoGroupAssociationOrderField!
}
"""
Properties by which TodoToTodoGroupAssociation connections can be ordered.
"""
enum TodoToTodoGroupAssociationOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
TodoToTodoGroupAssociationWhereInput is used for filtering TodoToTodoGroupAssociation objects.
Input was generated by ent.
"""
input TodoToTodoGroupAssociationWhereInput {
  not: TodoToTodoGroupAssociationWhereInput
  and: [TodoToTodoGroupAssociationWhereInput!]
  or: [TodoToTodoGroupAssociationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  assignee_id field predicates
  """
  assigneeID: Int
  assigneeIDNEQ: Int
  assigneeIDIn: [Int!]
  assigneeIDNotIn: [Int!]
  assigneeIDGT: Int
  assigneeIDGTE: Int
  assigneeIDLT: Int
  assigneeIDLTE: Int
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  done_at field predicates
  """
  doneAt: Time
  doneAtNEQ: Time
  doneAtIn: [Time!]
  doneAtNotIn: [Time!]
  doneAtGT: Time
  doneAtGTE: Time
  doneAtLT: Time
  doneAtLTE: Time
  doneAtIsNil: Boolean
  doneAtNotNil: Boolean
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  reminders edge predicates
  """
  hasReminders: Boolean
  hasRemindersWith: [ReminderWhereInput!]
  """
  groups edge predicates
  """
  hasGroups: Boolean
  hasGroupsWith: [TodoGroupWhereInput!]
  """
  grouped_todos edge predicates
  """
  hasGroupedTodos: Boolean
  hasGroupedTodosWith: [TodoToTodoGroupAssociationWhereInput!]
}
type User implements Node {
  id: ID!
  name: String!
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
  moderatorUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  moderators: [User!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  todos edge predicates
  """
  hasTodos: Boolean
  hasTodosWith: [TodoWhereInput!]
  """
  moderator_users edge predicates
  """
  hasModeratorUsers: Boolean
  hasModeratorUsersWith: [UserWhereInput!]
  """
  moderators edge predicates
  """
  hasModerators: Boolean
  hasModeratorsWith: [UserWhereInput!]
}
